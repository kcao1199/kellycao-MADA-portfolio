[
  {
    "objectID": "tidytuesday-exercise/tidytuesday-exercise.html",
    "href": "tidytuesday-exercise/tidytuesday-exercise.html",
    "title": "Tidy Tuesday Exercise",
    "section": "",
    "text": "Placeholder file for the future Tidy Tuesday exercise."
  },
  {
    "objectID": "starter-analysis-exercise/results/readme.html",
    "href": "starter-analysis-exercise/results/readme.html",
    "title": "Kelly Cao Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains results produced by the code, such as figures and tables.\nDepending on the size and type of your project, you can either place it all in a single folder or create sub-folders. For instance you could create a folder for figures, another for tables. Or you could create a sub-folder for dataset 1, another for dataset 2. Or you could have a subfolder for exploratory analysis, another for final analysis. The options are endless, choose whatever makes sense for your project. For this template, there is just a a single folder, but having sub-folders is often a good idea."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "title": "Data Analysis Project",
    "section": "",
    "text": "ERICK MOLLINEDO contributed to this exercise.\nWarning: package 'here' was built under R version 4.2.3"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "title": "Data Analysis Project",
    "section": "2.1 General Background Information",
    "text": "2.1 General Background Information\nThe analysis is performed for practice and education purpose. A theorized, messy data set is provided, and a collaboration is performed to process, clean, and analyze the data set using R and Rstudio."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "title": "Data Analysis Project",
    "section": "2.2 Description of data and data source",
    "text": "2.2 Description of data and data source\nThe data is provided in a .xlsx file, which contain demographic information on 14 different individual. The demographic information include: height, weight, gender, income, and education level."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "title": "Data Analysis Project",
    "section": "2.3 Questions/Hypotheses to be addressed",
    "text": "2.3 Questions/Hypotheses to be addressed\nWhat type of analysis can be performed? What can be determined when a linear model is applied to this dataset?"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "title": "Data Analysis Project",
    "section": "3.1 Data aquisition",
    "text": "3.1 Data aquisition\nThe data is initially provided by Andreas Handel for the Spring 2024 MADA course. The data is then manipulated by Kelly Cao in part 1."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#figures-and-tables",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#figures-and-tables",
    "title": "Data Analysis Project",
    "section": "4.1 Figures and Tables",
    "text": "4.1 Figures and Tables\nFigure 1 shows a boxplot of the height of the individuals stratified by the education of the individual\n\n\n\n\n\nFigure 1: Figure showing the heights of the individual stratified by their education level: Associate Degree (AD), Bachelor’s Degree (BD), Graduate/PRofessional Degree (GD), High School/GED (HS), Some College but no degree (SoCo), and Vocational Training (VT).\n\n\n\n\nFigure 2 shows a scatterplot of the weight of the individuals stratified by the income of the individual\n\n\n\n\n\nFigure 2: Figure showing the weigth of the individual stratified by the income of the individual in USD.\n\n\n\n\n\n\n\n\nTable 1: Linear model fit table using height as outcome, Household income and Education Level as predictor.\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n115.4778103\n97.7717435\n1.1810960\n0.3589881\n\n\nIncome\n0.0008767\n0.0013885\n0.6314247\n0.5923064\n\n\nEducationBD\n-37.7545890\n45.2810144\n-0.8337841\n0.4921231\n\n\nEducationGD\n-46.0711960\n64.0386221\n-0.7194283\n0.5465848\n\n\nEducationHS\n28.0416531\n57.2131095\n0.4901264\n0.6725369\n\n\nEducationSoCo\n-4.8880679\n37.2651912\n-0.1311698\n0.9076453\n\n\nEducationVT\n-28.6529579\n39.7491709\n-0.7208442\n0.5458763\n\n\n\n\n\n\nThe code used to perform the linear fit analysis is shown below.\n\n#load needed packages. make sure they are installed.\nlibrary(ggplot2) #for plotting\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\nlibrary(broom) #for cleaning up output from lm()\n\nWarning: package 'broom' was built under R version 4.2.3\n\nlibrary(here) #for data loading/saving\n\n#path to data\n#note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata2.rds\")\n\n#load data. \nmydata &lt;- readRDS(data_location)\n\n# fit linear model using height as outcome, Household income and Education Level as predictor\nlmfit3 &lt;- lm(Height ~ `Income` + `Education`, mydata)\n\n# place results from fit into a data frame with the tidy function\nlmtable3 &lt;- broom::tidy(lmfit3)\n\n#look at fit results\nprint(lmtable3)\n\n# A tibble: 7 × 5\n  term            estimate std.error statistic p.value\n  &lt;chr&gt;              &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 (Intercept)   115.        97.8         1.18    0.359\n2 Income          0.000877   0.00139     0.631   0.592\n3 EducationBD   -37.8       45.3        -0.834   0.492\n4 EducationGD   -46.1       64.0        -0.719   0.547\n5 EducationHS    28.0       57.2         0.490   0.673\n6 EducationSoCo  -4.89      37.3        -0.131   0.908\n7 EducationVT   -28.7       39.7        -0.721   0.546\n\n# save fit results table  \ntable_file3 = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"resulttable3.rds\")\nsaveRDS(lmtable3, file = table_file3)"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis-and-conclusion",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis-and-conclusion",
    "title": "Data Analysis Project",
    "section": "4.2 Full analysis and Conclusion",
    "text": "4.2 Full analysis and Conclusion\nIt appears that the individuals with the graduate degree showed the greatest variation in height in accordance to Figure 1. In the other education level, there is little variation in height. As for the comparison between income and weight, there appears to be little correlation between the two variables. Despite that, there is a slight negative relation between income and weight when showing a line of best fit.\nIn Table 1, the intercept provided an extremely high p=value, thus showing that the income and education variable affecting the height can not be proven or concluded."
  },
  {
    "objectID": "starter-analysis-exercise/data/readme.html",
    "href": "starter-analysis-exercise/data/readme.html",
    "title": "Kelly Cao Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all data at various stages.\nThis data is being loaded/manipulated/changed/saved with code from the code folders.\nYou should place the raw data in the raw_data folder and not edit it. Ever!\nIdeally, load the raw data into R and do all changes there with code, so everything is automatically reproducible and documented.\nSometimes, you need to edit the files in the format you got. For instance, Excel files are sometimes so poorly formatted that it’s close to impossible to read them into R, or the persons you got the data from used color to code some information, which of course won’t import into R. In those cases, you might have to make modifications in a software other than R. If you need to make edits in whatever format you got the data (e.g. Excel), make a copy and place those copies in a separate folder, AND ONLY EDIT THOSE COPIES. Also, write down somewhere the edits you made.\nAdd as many sub-folders as suitable. If you only have a single processing step, one sub-folder for processed data is enough. If you have multiple stages of cleaning and processing, additional sub-folders might be useful. Adjust based on the complexity of your project.\nI suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data:\nhttp://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata"
  },
  {
    "objectID": "starter-analysis-exercise/code/readme.html",
    "href": "starter-analysis-exercise/code/readme.html",
    "title": "Kelly Cao Data Analysis Portfolio",
    "section": "",
    "text": "Place your various R or Quarto files in the appropriate folders.\nYou can either have fewer large scripts, or multiple scripts that do only specific actions. Those can be R or Quarto files. In either case, document the scripts and what goes on in them so well that someone else (including future you) can easily figure out what is happening.\nThe scripts should load the appropriate data (e.g. raw or processed), perform actions, and save results (e.g. processed data, figures, computed values) in the appropriate folders. Document somewhere what inputs each script takes and where output is placed.\nIf scripts need to be run in a specific order, document this. Either as comments in the script, or in a separate text file such as this readme file. Ideally of course in both locations.\nDepending on your specific project, you might want to have further folders/sub-folders."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\n\nWarning: package 'readxl' was built under R version 4.2.3\n\nlibrary(dplyr) #for data processing/cleaning\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\n\nWarning: package 'tidyr' was built under R version 4.2.3\n\nlibrary(skimr) #for nice visualization of data \n\nWarning: package 'skimr' was built under R version 4.2.3\n\nlibrary(here) #to set paths\n\nWarning: package 'here' was built under R version 4.2.3\n\n\nhere() starts at C:/Users/malik/Documents/1. UGA Classes/15. Malika Spring 2024/MADASpring_24/kellycao-MADA-portfolio\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata2.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 5 × 3\n  `Variable Name` `Variable Definition`                         `Allowed Values`\n  &lt;chr&gt;           &lt;chr&gt;                                         &lt;chr&gt;           \n1 Height          height in centimeters                         numeric value &gt;…\n2 Weight          weight in kilograms                           numeric value &gt;…\n3 Gender          identified gender (male/female/other)         M/F/O/NA        \n4 Income          Gross Income in USD                           numeric value &gt;…\n5 Education Level Highest Education level (Less than high scho… &lt;HS/HS/VT/SoCo/…\n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 5\n$ Height             &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"1…\n$ Weight             &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, …\n$ Gender             &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", …\n$ `Household Income` &lt;dbl&gt; 35250, 67890, 42000, 98500, 55000, 123456, 78900, 6…\n$ `Education Level`  &lt;chr&gt; \"HS\", \"AD\", \"BD\", \"GD\", \"BD\", \"GD\", \"VT\", \"SoCo\", \"…\n\nsummary(rawdata)\n\n    Height              Weight          Gender          Household Income\n Length:14          Min.   :  45.0   Length:14          Min.   : 27600  \n Class :character   1st Qu.:  55.0   Class :character   1st Qu.: 45250  \n Mode  :character   Median :  70.0   Mode  :character   Median : 73395  \n                    Mean   : 602.7                      Mean   : 75093  \n                    3rd Qu.:  90.0                      3rd Qu.: 95625  \n                    Max.   :7000.0                      Max.   :150000  \n                    NA's   :1                                           \n Education Level   \n Length:14         \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n                   \n\nhead(rawdata)\n\n# A tibble: 6 × 5\n  Height Weight Gender `Household Income` `Education Level`\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;            \n1 180        80 M                   35250 HS               \n2 175        70 O                   67890 AD               \n3 sixty      60 F                   42000 BD               \n4 178        76 F                   98500 GD               \n5 192        90 NA                  55000 BD               \n6 6          55 F                  123456 GD               \n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nEducation Level\n0\n1\n2\n4\n0\n7\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55\n70\n90\n7000\n▇▁▁▁▁\n\n\nHousehold Income\n0\n1.00\n75092.57\n36174.99\n27600\n45250\n73395\n95625\n150000\n▇▆▇▃▂\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nEducation Level\n0\n1\n2\n4\n0\n7\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\nHousehold Income\n0\n1.00\n77638.15\n36323.58\n27600\n55000.00\n78900\n98500\n150000\n▆▆▇▃▂\n\n\n\n\nhist(d1$Height)\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nEducation Level\n0\n1\n2\n4\n0\n7\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\nHousehold Income\n0\n1.00\n77638.15\n36323.58\n27600\n55000.00\n78900\n98500\n150000\n▆▆▇▃▂\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nEducation Level\n0\n1\n2\n4\n0\n6\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\nHousehold Income\n0\n1\n81381.45\n36188.87\n32000\n59100.0\n78900\n101250\n150000\n▇▇▅▅▂\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nEducation Level\n0\n1\n2\n4\n0\n6\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\nHousehold Income\n0\n1\n81381.45\n36188.87\n32000\n59100.0\n78900\n101250\n150000\n▇▇▅▅▂\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nEducation Level\n0\n1\n2\n4\n0\n6\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nHousehold Income\n0\n1\n76688.44\n30605.64\n32000\n63200\n78900\n98500\n123456\n▅▅▂▇▂\n\n\n\n\n\nFinally I will rename the Household Income variable to ‘Income’ and the Education Level variable to ‘Education’\n\nd5 &lt;- rename(d4, \"Income\" = \"Household Income\", \"Education\" = \"Education Level\")\nskimr::skim(d5)\n\n\nData summary\n\n\nName\nd5\n\n\nNumber of rows\n9\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nEducation\n0\n1\n2\n4\n0\n6\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nIncome\n0\n1\n76688.44\n30605.64\n32000\n63200\n78900\n98500\n123456\n▅▅▂▇▂\n\n\n\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata2 &lt;- d5\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata2.rds\")\nsaveRDS(processeddata2, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/readme.html",
    "href": "starter-analysis-exercise/code/eda-code/readme.html",
    "title": "Kelly Cao Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory data analysis (EDA) on the processed/cleaned data. The code produces a few tables and figures, which are saved in the appropriate results sub-folder."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda.html",
    "href": "starter-analysis-exercise/code/eda-code/eda.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nWarning: package 'here' was built under R version 4.2.3\n\n\nhere() starts at C:/Users/malik/Documents/1. UGA Classes/15. Malika Spring 2024/MADASpring_24/kellycao-MADA-portfolio\n\nlibrary(dplyr)\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\n\nWarning: package 'skimr' was built under R version 4.2.3\n\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          3     \n_______________________          \nColumn type frequency:           \n  factor                   1     \n  numeric                  2     \n________________________         \nGroup variables            None  \n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique top_counts      \n1 Gender                0             1 FALSE          3 M: 4, F: 3, O: 2\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate  mean   sd  p0 p25 p50 p75 p100 hist \n1 Height                0             1 166.  16.0 133 156 166 178  183 ▂▁▃▃▇\n2 Weight                0             1  70.1 21.2  45  55  70  80  110 ▇▂▃▂▂\n\n# save to file\nsummarytable_file = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html",
    "href": "presentation-exercise/presentation-exercise.html",
    "title": "Presentation Exercise",
    "section": "",
    "text": "The following exercise involve recreating open sourced visuals found in the following links:"
  },
  {
    "objectID": "data-exercise/data-exercise.html",
    "href": "data-exercise/data-exercise.html",
    "title": "Data Exercise",
    "section": "",
    "text": "The following exercise was designed to practice and explore complex data set. In the following example, I used the package gutenbergr."
  },
  {
    "objectID": "aboutme.html",
    "href": "aboutme.html",
    "title": "ABOUT ME",
    "section": "",
    "text": "The first time I saw a volcanic eruption!"
  },
  {
    "objectID": "aboutme.html#background",
    "href": "aboutme.html#background",
    "title": "ABOUT ME",
    "section": "Background",
    "text": "Background\nHello! My name is Kelly Cao, and I am a first-year non-thesis Master’s student in the IOB department. Most of my background is in wet lab experience, so I have much to learn. I am excited to get to know everyone!"
  },
  {
    "objectID": "aboutme.html#education",
    "href": "aboutme.html#education",
    "title": "ABOUT ME",
    "section": "Education",
    "text": "Education\nMs Bioinformatics, August 2023 - Present University of Georgia, Athens, GA\nBs Chemistry, August 2017 - May 2021 Georgia State University, Atlanta, GA"
  },
  {
    "objectID": "aboutme.html#experience",
    "href": "aboutme.html#experience",
    "title": "ABOUT ME",
    "section": "Experience",
    "text": "Experience\nIn my limited experience with R, I had the privilege of collaborating with Dr. Pejman Rohani and Dr. Christian Gunnings on data cleaning, particularly with pertussis vaccination records provided by the CDC. Using basic functions like dplyr and readr, I’ve had to opportunity to clean and analyze fixed width format (FWF) data files and prepare it for analysis. This valuable experience provided me with insights into the complexities of working with public health data and reinforced my commitment to learning and refining my skills in data manipulation with R.\nI also have some limited experience working with Python, Matlab, and C++."
  },
  {
    "objectID": "aboutme.html#hopes-for-the-class",
    "href": "aboutme.html#hopes-for-the-class",
    "title": "ABOUT ME",
    "section": "Hopes for the Class",
    "text": "Hopes for the Class\nI am taking this class in addition to a statistics class, so I’m hoping to dedicate my time to learn more about data analysis in a way I can apply to my work."
  },
  {
    "objectID": "aboutme.html#interests",
    "href": "aboutme.html#interests",
    "title": "ABOUT ME",
    "section": "Interests",
    "text": "Interests\nIn my free time, I enjoy knitting, hiking, and playing with my two cats.\nI’ve also started re-watching “Doctor Who” lately, and I am currently on the 4th season so far.\n\n\n\n\n\n\nMocha\n\n\n\n\n\n\n\nCocoa\n\n\n\n\n\nThey’re pandemic babies!"
  },
  {
    "objectID": "aboutme.html#interesting-resource",
    "href": "aboutme.html#interesting-resource",
    "title": "ABOUT ME",
    "section": "Interesting Resource",
    "text": "Interesting Resource\nA model that estimates and reports disease outbreaks with R using a Bayesian approach.\nGithub Link"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html",
    "href": "coding-exercise/coding-exercise.html",
    "title": "R Coding Exercise",
    "section": "",
    "text": "The following coding exercise will involve loading, viewing, processing, and visualizing the dataset provided with gapminder."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#loading-and-checking-data",
    "href": "coding-exercise/coding-exercise.html#loading-and-checking-data",
    "title": "R Coding Exercise",
    "section": "Loading and Checking Data",
    "text": "Loading and Checking Data\nI usually start any script with installing and loading my required packages. The dslab package will be used provide our data set (gapminder) that will be analyzed below. The package renv which will be used to ensure reproducibility for a future date.\nOften times, when I’m using a new or unfamiliar package, I type in ?name_of_package (e.g. ?tidyverse) to familiarize myself more with the package and its different commands (e.g. ?filter()).\n\n#Installing and loading needed packages with the command install.packages() and the library() function\nlibrary(\"dslabs\")\nlibrary(renv)\nlibrary(tidyverse)\n\n#The help() function is used to look at data provided in 'gapminder'\nhelp(gapminder)\n\n#Check the summary and structure of the dataset 'gapminder'\nstr(gapminder)\n\n'data.frame':   10545 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ year            : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ infant_mortality: num  115.4 148.2 208 NA 59.9 ...\n $ life_expectancy : num  62.9 47.5 36 63 65.4 ...\n $ fertility       : num  6.19 7.65 7.32 4.43 3.11 4.55 4.82 3.45 2.7 5.57 ...\n $ population      : num  1636054 11124892 5270844 54681 20619075 ...\n $ gdp             : num  NA 1.38e+10 NA NA 1.08e+11 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 4 1 1 2 2 3 2 5 4 3 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 19 11 10 2 15 21 2 1 22 21 ...\n\nsummary(gapminder)\n\n                country           year      infant_mortality life_expectancy\n Albania            :   57   Min.   :1960   Min.   :  1.50   Min.   :13.20  \n Algeria            :   57   1st Qu.:1974   1st Qu.: 16.00   1st Qu.:57.50  \n Angola             :   57   Median :1988   Median : 41.50   Median :67.54  \n Antigua and Barbuda:   57   Mean   :1988   Mean   : 55.31   Mean   :64.81  \n Argentina          :   57   3rd Qu.:2002   3rd Qu.: 85.10   3rd Qu.:73.00  \n Armenia            :   57   Max.   :2016   Max.   :276.90   Max.   :83.90  \n (Other)            :10203                  NA's   :1453                    \n   fertility       population             gdp               continent   \n Min.   :0.840   Min.   :3.124e+04   Min.   :4.040e+07   Africa  :2907  \n 1st Qu.:2.200   1st Qu.:1.333e+06   1st Qu.:1.846e+09   Americas:2052  \n Median :3.750   Median :5.009e+06   Median :7.794e+09   Asia    :2679  \n Mean   :4.084   Mean   :2.701e+07   Mean   :1.480e+11   Europe  :2223  \n 3rd Qu.:6.000   3rd Qu.:1.523e+07   3rd Qu.:5.540e+10   Oceania : 684  \n Max.   :9.220   Max.   :1.376e+09   Max.   :1.174e+13                  \n NA's   :187     NA's   :185         NA's   :2972                       \n             region    \n Western Asia   :1026  \n Eastern Africa : 912  \n Western Africa : 912  \n Caribbean      : 741  \n South America  : 684  \n Southern Europe: 684  \n (Other)        :5586  \n\n#Determine the class type of gapminder\nclass(gapminder)\n\n[1] \"data.frame\""
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#processing-data",
    "href": "coding-exercise/coding-exercise.html#processing-data",
    "title": "R Coding Exercise",
    "section": "Processing Data",
    "text": "Processing Data\nIn the script shown below for processing the data, I used a few commands found in dplyr and magrittr, both of which could be found in tidyverse. As I was previously exposed to R, I was informed that indentation was important to provide clarity in the code.\n\n#Assigning African countries in the dataset to newly created object 'africadata.' A pipe operator is used to pass the data set of 'gapminder' to the filter function call on the right of it.\nafricadata &lt;- \n  gapminder %&gt;%\n  filter(continent == 'Africa')\n#The filter() was used to filter out the rows of the data set where the continent is Africa only.\n\n#Running str() and summary() to determine structure and summary of the new object\nstr(africadata)\n\n'data.frame':   2907 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 2 3 18 22 26 27 29 31 32 33 ...\n $ year            : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ infant_mortality: num  148 208 187 116 161 ...\n $ life_expectancy : num  47.5 36 38.3 50.3 35.2 ...\n $ fertility       : num  7.65 7.32 6.28 6.62 6.29 6.95 5.65 6.89 5.84 6.25 ...\n $ population      : num  11124892 5270844 2431620 524029 4829291 ...\n $ gdp             : num  1.38e+10 NA 6.22e+08 1.24e+08 5.97e+08 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 11 10 20 17 20 5 10 20 10 10 ...\n\nsummary(africadata)\n\n         country          year      infant_mortality life_expectancy\n Algeria     :  57   Min.   :1960   Min.   : 11.40   Min.   :13.20  \n Angola      :  57   1st Qu.:1974   1st Qu.: 62.20   1st Qu.:48.23  \n Benin       :  57   Median :1988   Median : 93.40   Median :53.98  \n Botswana    :  57   Mean   :1988   Mean   : 95.12   Mean   :54.38  \n Burkina Faso:  57   3rd Qu.:2002   3rd Qu.:124.70   3rd Qu.:60.10  \n Burundi     :  57   Max.   :2016   Max.   :237.40   Max.   :77.60  \n (Other)     :2565                  NA's   :226                     \n   fertility       population             gdp               continent   \n Min.   :1.500   Min.   :    41538   Min.   :4.659e+07   Africa  :2907  \n 1st Qu.:5.160   1st Qu.:  1605232   1st Qu.:8.373e+08   Americas:   0  \n Median :6.160   Median :  5570982   Median :2.448e+09   Asia    :   0  \n Mean   :5.851   Mean   : 12235961   Mean   :9.346e+09   Europe  :   0  \n 3rd Qu.:6.860   3rd Qu.: 13888152   3rd Qu.:6.552e+09   Oceania :   0  \n Max.   :8.450   Max.   :182201962   Max.   :1.935e+11                  \n NA's   :51      NA's   :51          NA's   :637                        \n                       region   \n Eastern Africa           :912  \n Western Africa           :912  \n Middle Africa            :456  \n Northern Africa          :342  \n Southern Africa          :285  \n Australia and New Zealand:  0  \n (Other)                  :  0  \n\n#Creating a new object representing the variables 'infant mortality' and 'life expectancy' in 'IM_LE.' The select() function is used to specify the columns of interest. \nIM_LE &lt;- \n  select(africadata, infant_mortality, life_expectancy)\n\n#Running str() and summary() to determine structure and summary of the new object\nstr(IM_LE)\n\n'data.frame':   2907 obs. of  2 variables:\n $ infant_mortality: num  148 208 187 116 161 ...\n $ life_expectancy : num  47.5 36 38.3 50.3 35.2 ...\n\nsummary(IM_LE)\n\n infant_mortality life_expectancy\n Min.   : 11.40   Min.   :13.20  \n 1st Qu.: 62.20   1st Qu.:48.23  \n Median : 93.40   Median :53.98  \n Mean   : 95.12   Mean   :54.38  \n 3rd Qu.:124.70   3rd Qu.:60.10  \n Max.   :237.40   Max.   :77.60  \n NA's   :226                     \n\n#Creating the object 'Pop_Le' to reflect the variables 'population' and 'life expectancy.'\nPop_LE &lt;-\n  select(africadata, population, life_expectancy)\n\n#Running str() and summary() to determine structure and summary of the new object\nstr(Pop_LE)\n\n'data.frame':   2907 obs. of  2 variables:\n $ population     : num  11124892 5270844 2431620 524029 4829291 ...\n $ life_expectancy: num  47.5 36 38.3 50.3 35.2 ...\n\nsummary(Pop_LE)\n\n   population        life_expectancy\n Min.   :    41538   Min.   :13.20  \n 1st Qu.:  1605232   1st Qu.:48.23  \n Median :  5570982   Median :53.98  \n Mean   : 12235961   Mean   :54.38  \n 3rd Qu.: 13888152   3rd Qu.:60.10  \n Max.   :182201962   Max.   :77.60  \n NA's   :51"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#plotting",
    "href": "coding-exercise/coding-exercise.html#plotting",
    "title": "R Coding Exercise",
    "section": "Plotting",
    "text": "Plotting\nIn the following script, I used the package ggplot2, which is also found in tidyverse. I initially based the script off of the plots we’ve previously made and followed that syntax, but I wanted to add more details and visuals to the plot.\nI then saw on a stack overflow page that there is a function that can be used to list the structure of functions in a specified environment (e.g. lsf.str(ggplot2)). That, however, listed a huge and overwhelmingly large list, so I settled with googling different ways to adjust the visual of the plot using ggplot().\n\n\n\n\n\n\nNote\n\n\n\nJust a great source to visually see the commands already rendered for ggplot2:\nhttps://ggplot2.tidyverse.org/reference/lims.html\n\n\n\n#Using the package ggplot2 (which is found in tidyverse) to create a scatter plot using the variables in the object 'IM_LE' and assigning it to the variable 'p1'\np1 &lt;- ggplot(IM_LE, aes(x = infant_mortality, y = life_expectancy))+geom_point()+\n      ggtitle('Infant Mortality vs Life Expectancy')+\n      theme(plot.title= element_text(hjust=0.5))+\n      xlab('Infant Mortality(death/100)')+\n      ylab('Life Expectancy (years)')+\n      labs(caption = \"Figure 1: The life expectancy in years plotted as a function of the infant deaths per 100 infant from 1960-2016.\")+\n      theme(plot.caption = element_text(hjust=0, face=\"bold\"))\n\n#The theme() function was a great way to manipulate the specific element in the plot, whether it was color, size, or orientation of the text or visuals.\n\n#Using the plot() function to determine if the plot was properly created\nplot(p1)\n\n\n\n#Repeating the previous step(s) to plot Pop_LE into the object 'p2'. The data is heavily clustered together due to the immense magnitude of the population, so the population axis was scaled by taking the logarithm of it.\np2 &lt;- ggplot(Pop_LE, aes(x = log(population), y = life_expectancy))+geom_point()+\n      ggtitle('Country Population vs Life Expectancy')+\n      theme(plot.title= element_text(hjust=0.5))+\n      xlab('log(Population)')+\n      ylab('Life Expectancy (years)')+\n      labs(caption = \"Figure 1: The life expectancy in years plotted as a function of the population in African countries from 1960-2016.\")+\n      theme(plot.caption = element_text(hjust=0, face=\"bold\"))\n\n#Using the plot() function to determine if the plot was properly created\nplot(p2)\n\n\n\n\nThe plots shown above shows a negative correlation between infant mortality and life expectancy. The second plot shows a positive correlation between population size and life expectancy, showing that people tend to live longer as the population grows.\nThe “streaks” of data that is shown in the plot can be explained by the continuous collection of data from certain locations over the span of several years. As indicated in plot p2, a countries’ population tend to increase over time."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#more-data-processing",
    "href": "coding-exercise/coding-exercise.html#more-data-processing",
    "title": "R Coding Exercise",
    "section": "More Data Processing",
    "text": "More Data Processing\nI had to search how to use the filter() function to exclude any categories that had data, and I found the solution in the R for Health Data Science website.\n\n\n\n\n\n\nThis also showed me how to filter out any rows that had any missing data set with an example shown below:\n\nRandom_example &lt;-\n  africadata %&gt;%\n  select(year, fertility)%&gt;%\n  filter(!is.na(fertility))\nstr(Random_example)\n\n'data.frame':   2856 obs. of  2 variables:\n $ year     : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ fertility: num  7.65 7.32 6.28 6.62 6.29 6.95 5.65 6.89 5.84 6.25 ...\n\nsummary(Random_example)\n\n      year        fertility    \n Min.   :1960   Min.   :1.500  \n 1st Qu.:1974   1st Qu.:5.160  \n Median :1988   Median :6.160  \n Mean   :1988   Mean   :5.851  \n 3rd Qu.:2001   3rd Qu.:6.860  \n Max.   :2015   Max.   :8.450  \n\n\n\n\n\nThe following script is used to show the different years that have missing data for infant mortality.\n\n#Filtering the data set to only include the years with missing data points for 'infant_mortality' in 'africadata' using the select() and filter() function. The 'is.na()' function allows you to filter out and identify missing or not available data. \ninf_missing_data &lt;- \n  africadata %&gt;%\n  select(year, infant_mortality)%&gt;%\n  filter(is.na(infant_mortality))\n\n#Using str() and summary() function to determine if I filtered the dataset currently. I also used view() to visually see the object 'inf_missing_data'\nstr(inf_missing_data)\n\n'data.frame':   226 obs. of  2 variables:\n $ year            : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ infant_mortality: num  NA NA NA NA NA NA NA NA NA NA ...\n\nsummary(inf_missing_data)\n\n      year      infant_mortality\n Min.   :1960   Min.   : NA     \n 1st Qu.:1963   1st Qu.: NA     \n Median :1968   Median : NA     \n Mean   :1978   Mean   :NaN     \n 3rd Qu.:1978   3rd Qu.: NA     \n Max.   :2016   Max.   : NA     \n                NA's   :226     \n\n#Creating a new object that consist of data for the year 2000\nyear2000 &lt;- \n  africadata %&gt;%\n  filter(year == '2000')\n\n#Using str() and summary() function to determine if I filtered the data set currently.\nstr(year2000)\n\n'data.frame':   51 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 2 3 18 22 26 27 29 31 32 33 ...\n $ year            : int  2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ...\n $ infant_mortality: num  33.9 128.3 89.3 52.4 96.2 ...\n $ life_expectancy : num  73.3 52.3 57.2 47.6 52.6 46.7 54.3 68.4 45.3 51.5 ...\n $ fertility       : num  2.51 6.84 5.98 3.41 6.59 7.06 5.62 3.7 5.45 7.35 ...\n $ population      : num  31183658 15058638 6949366 1736579 11607944 ...\n $ gdp             : num  5.48e+10 9.13e+09 2.25e+09 5.63e+09 2.61e+09 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 11 10 20 17 20 5 10 20 10 10 ...\n\nsummary(year2000)\n\n         country        year      infant_mortality life_expectancy\n Algeria     : 1   Min.   :2000   Min.   : 12.30   Min.   :37.60  \n Angola      : 1   1st Qu.:2000   1st Qu.: 60.80   1st Qu.:51.75  \n Benin       : 1   Median :2000   Median : 80.30   Median :54.30  \n Botswana    : 1   Mean   :2000   Mean   : 78.93   Mean   :56.36  \n Burkina Faso: 1   3rd Qu.:2000   3rd Qu.:103.30   3rd Qu.:60.00  \n Burundi     : 1   Max.   :2000   Max.   :143.30   Max.   :75.00  \n (Other)     :45                                                  \n   fertility       population             gdp               continent \n Min.   :1.990   Min.   :    81154   Min.   :2.019e+08   Africa  :51  \n 1st Qu.:4.150   1st Qu.:  2304687   1st Qu.:1.274e+09   Americas: 0  \n Median :5.550   Median :  8799165   Median :3.238e+09   Asia    : 0  \n Mean   :5.156   Mean   : 15659800   Mean   :1.155e+10   Europe  : 0  \n 3rd Qu.:5.960   3rd Qu.: 17391242   3rd Qu.:8.654e+09   Oceania : 0  \n Max.   :7.730   Max.   :122876723   Max.   :1.329e+11                \n                                                                      \n                       region  \n Eastern Africa           :16  \n Western Africa           :16  \n Middle Africa            : 8  \n Northern Africa          : 6  \n Southern Africa          : 5  \n Australia and New Zealand: 0  \n (Other)                  : 0  \n\n\nThere are 226 missing data point for infant mortality between 1960-2016. In the year 2000, there are 51 observations over 9 different variables."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#more-plotting",
    "href": "coding-exercise/coding-exercise.html#more-plotting",
    "title": "R Coding Exercise",
    "section": "More Plotting",
    "text": "More Plotting\n\n#Using the package ggplot2 to plot Life expectancy vs infant mortality for the year 2000 in 'p3' \np3 &lt;- ggplot(year2000, aes(x = infant_mortality, y = life_expectancy))+geom_point()+geom_smooth(method = \"lm\")+\n      ggtitle('Infant Mortality vs Life Expectancy')+\n      theme(plot.title= element_text(hjust=0.5))+\n      xlab('Infant Mortality(death/100)')+\n      ylab('Life Expectancy (years)')+\n      labs(caption = \"Figure 1: The life expectancy in years plotted as a function of the infant deaths per 100 infant in 2000.\")+\n      theme(plot.caption = element_text(hjust=0, face=\"bold\"))\n\n#Using the plot() function to determine if the plot was properly created\nplot(p3)\n\n\n\n#Repeating the previous step(s) to plot 'year2000' into the object 'p4'. Once again, the log(population) is used to scale and visualize trend with more clarity.\np4 &lt;- ggplot(year2000, aes(x = log(population), y = life_expectancy))+geom_point()+geom_smooth(method = \"lm\")+\n      ggtitle('Country Population vs Life Expectancy')+\n      theme(plot.title= element_text(hjust=0.5))+\n      xlab('log(Population)')+\n      ylab('Life Expectancy (years)')+\n      labs(caption = \"Figure 1: The life expectancy in years plotted as a function of the population in African countries in 2000.\")+\n      theme(plot.caption = element_text(hjust=0, face=\"bold\"))\n\n#Using the plot() function to determine if the plot was properly created\nplot(p4)\n\n\n\n\nBased on visually observing the plots, plot p3 shows similar trend as p1 with negative correlation between infant mortality and life expectancy. However, in p4, the plot showed no noticeable correlation, which contrasts greatly with plot p2."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#simple-model-fits",
    "href": "coding-exercise/coding-exercise.html#simple-model-fits",
    "title": "R Coding Exercise",
    "section": "Simple Model Fits",
    "text": "Simple Model Fits\nThe script shown below fits a linear model to the data frame year2000. The models sets the variables plotted above as its outcome and predictor.\nI used the same syntax and format that was shared and used for the previous assignment for the lm() function.\n\n#Fitting the data set to a linear model with 'life expectancy' as the outcome and 'infant mortality' as the predictor\nlmfit1 &lt;- lm(life_expectancy ~ infant_mortality, year2000)\n\n#Use the summary() command to check over the fit \nsummary(lmfit1)\n\n\nCall:\nlm(formula = life_expectancy ~ infant_mortality, data = year2000)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-22.6651  -3.7087   0.9914   4.0408   8.6817 \n\nCoefficients:\n                 Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)      71.29331    2.42611  29.386  &lt; 2e-16 ***\ninfant_mortality -0.18916    0.02869  -6.594 2.83e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.221 on 49 degrees of freedom\nMultiple R-squared:  0.4701,    Adjusted R-squared:  0.4593 \nF-statistic: 43.48 on 1 and 49 DF,  p-value: 2.826e-08\n\n#Fitting the data set to a linear model with 'life expectancy' as the outcome and 'population' as the predictor\nlmfit2 &lt;- lm(life_expectancy ~ population, year2000)\n\n#Use the summary() command to check over the fit \nsummary(lmfit2)\n\n\nCall:\nlm(formula = life_expectancy ~ population, data = year2000)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-18.429  -4.602  -2.568   3.800  18.802 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 5.593e+01  1.468e+00  38.097   &lt;2e-16 ***\npopulation  2.756e-08  5.459e-08   0.505    0.616    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 8.524 on 49 degrees of freedom\nMultiple R-squared:  0.005176,  Adjusted R-squared:  -0.01513 \nF-statistic: 0.2549 on 1 and 49 DF,  p-value: 0.6159\n\n\nBased on analysis performed above, lmfit1 appears to be the better model. The p-value of the first model is extremely small, showing that the infant mortality is a significant predictor for the model. In the second model, the opposite is the case where its p-value &gt; 0.05, proving it to be statistically insignificant."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Kelly Cao’s Website and Data Analysis Portfolio",
    "section": "",
    "text": "Hello!\nWelcome to my website and data analysis portfolio. \nI’ll be compiling my projects for my Spring 2024 MADA class here.\n\nPlease use the Menu Bar above to look around.\nHave fun!\nLast Updated 01/12/2024"
  },
  {
    "objectID": "starter-analysis-exercise/code/analysis-code/readme.html",
    "href": "starter-analysis-exercise/code/analysis-code/readme.html",
    "title": "Kelly Cao Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory analysis and statistical analysis on the processed/cleaned data. The code produces a few tables and figures, which are saved in the results folder.\nIt’s the same code done 3 times:\n\nFirst, there is an R script that you can run which does all the computations.\nSecond, there is a Quarto file which contains exactly the same code as the R script.\nThird, my current favorite, is a Quarto file with an approach where the code is pulled in from the R script and run.\n\nThe last version has the advantage of having code in one place for easy writing/debugging, and then being able to pull the code into the Quarto file for a nice combination of text/commentary and code.\nEach way of doing this is a reasonable approach, pick whichever one you prefer or makes the most sense for your setup. Whichever approach you choose, add ample documentation/commentary so you and others can easily understand what’s going on and what is done."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda2.html",
    "href": "starter-analysis-exercise/code/eda-code/eda2.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nWarning: package 'here' was built under R version 4.2.3\n\n\nhere() starts at C:/Users/malik/Documents/1. UGA Classes/15. Malika Spring 2024/MADASpring_24/kellycao-MADA-portfolio\n\nlibrary(dplyr)\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\n\nWarning: package 'skimr' was built under R version 4.2.3\n\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata2.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          5     \n_______________________          \nColumn type frequency:           \n  character                1     \n  factor                   1     \n  numeric                  3     \n________________________         \nGroup variables            None  \n\n── Variable type: character ────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate min max empty n_unique whitespace\n1 Education             0             1   2   4     0        6          0\n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique top_counts      \n1 Gender                0             1 FALSE          3 M: 4, F: 3, O: 2\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate    mean      sd    p0   p25   p50   p75\n1 Height                0             1   166.     16.0   133   156   166   178\n2 Weight                0             1    70.1    21.2    45    55    70    80\n3 Income                0             1 76688.  30606.  32000 63200 78900 98500\n    p100 hist \n1    183 ▂▁▃▃▇\n2    110 ▇▂▃▂▂\n3 123456 ▅▅▂▇▂\n\n# save to file\nsummarytable_file = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\nCreating a boxplot of height by education level\n\np5 &lt;- mydata %&gt;% ggplot(aes(x= Education, y= Height)) + geom_boxplot()\nplot(p5)\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-education.png\")\nggsave(filename = figure_file, plot=p5) \n\nSaving 7 x 5 in image\n\n\nFinally a scatterplot of Income against Weight\n\np6 &lt;- mydata %&gt;% ggplot(aes(x= Weight, y= Income)) + geom_point() + geom_smooth(method='lm')\nplot(p6)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"income-weight.png\")\nggsave(filename = figure_file, plot=p6) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\n\nWarning: package 'readxl' was built under R version 4.2.3\n\nlibrary(dplyr) #for data processing/cleaning\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\n\nWarning: package 'tidyr' was built under R version 4.2.3\n\nlibrary(skimr) #for nice visualization of data \n\nWarning: package 'skimr' was built under R version 4.2.3\n\nlibrary(here) #to set paths\n\nWarning: package 'here' was built under R version 4.2.3\n\n\nhere() starts at C:/Users/malik/Documents/1. UGA Classes/15. Malika Spring 2024/MADASpring_24/kellycao-MADA-portfolio\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 3 × 3\n  `Variable Name` `Variable Definition`                 `Allowed Values`      \n  &lt;chr&gt;           &lt;chr&gt;                                 &lt;chr&gt;                 \n1 Height          height in centimeters                 numeric value &gt;0 or NA\n2 Weight          weight in kilograms                   numeric value &gt;0 or NA\n3 Gender          identified gender (male/female/other) M/F/O/NA              \n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 3\n$ Height &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"155\", …\n$ Weight &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55, 50\n$ Gender &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"F\", \"M…\n\nsummary(rawdata)\n\n    Height              Weight          Gender         \n Length:14          Min.   :  45.0   Length:14         \n Class :character   1st Qu.:  55.0   Class :character  \n Mode  :character   Median :  70.0   Mode  :character  \n                    Mean   : 602.7                     \n                    3rd Qu.:  90.0                     \n                    Max.   :7000.0                     \n                    NA's   :1                          \n\nhead(rawdata)\n\n# A tibble: 6 × 3\n  Height Weight Gender\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; \n1 180        80 M     \n2 175        70 O     \n3 sixty      60 F     \n4 178        76 F     \n5 192        90 NA    \n6 6          55 F     \n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55\n70\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\nhist(d1$Height)\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\n\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d4\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/readme.html",
    "href": "starter-analysis-exercise/code/processing-code/readme.html",
    "title": "Kelly Cao Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code for processing data.\nCurrently, there is just a single Quarto file to illustrate how the processing can look like.\nInstead of a Quarto file that contains code, it is also possible to use R scripts or a combination of R scripts and Quarto code. Those approaches are illustrated in the full dataanalysis-template repository."
  },
  {
    "objectID": "starter-analysis-exercise/data/raw-data/readme.html",
    "href": "starter-analysis-exercise/data/raw-data/readme.html",
    "title": "Kelly Cao Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains a simple made-up data-set in an Excel file.\nIt contains the variables Height, Weight and Gender of a few imaginary individuals.\nThe dataset purposefully contains some faulty entries that need to be cleaned.\nGenerally, any dataset should contain some meta-data explaining what each variable in the dataset is. (This is often called a Codebook.) For this simple example, the codebook is given as a second sheet in the Excel file.\nThis raw data-set should generally not be edited by hand. It should instead be loaded and processed/cleaned using code."
  },
  {
    "objectID": "starter-analysis-exercise/products/readme.html",
    "href": "starter-analysis-exercise/products/readme.html",
    "title": "Kelly Cao Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all the products of your project.\nFor a classical academic project, this will be a peer-reviewed manuscript, and should be placed into a manuscript folder.\nFor our case, since we’ll want to put it on the website, we call it a report.\nOften you need a library of references in bibtex format, as well as a CSL style file that determines reference formatting. Since those files might be used by several of the products, I’m placing them in the main products folder. Feel free to re-organize."
  },
  {
    "objectID": "starter-analysis-exercise/results/figures/readme.html",
    "href": "starter-analysis-exercise/results/figures/readme.html",
    "title": "Kelly Cao Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all figures.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "starter-analysis-exercise/results/tables-files/readme.html",
    "href": "starter-analysis-exercise/results/tables-files/readme.html",
    "title": "Kelly Cao Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all tables (generally stored as Rds files) and other files.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "data-exercise/data-exercise.html#loading-and-checking-data",
    "href": "data-exercise/data-exercise.html#loading-and-checking-data",
    "title": "Data Exercise",
    "section": "Loading and Checking Data",
    "text": "Loading and Checking Data\nI first installed and loaded my packages. I used the Text Mining with R: A Tidy Approach resource to help guide me in analyzing this text. When I was stuck with some errors, I used ChatGPT to help diagnose the issue.\n\n#Loading packages\nlibrary(gutenbergr)\nlibrary(tidytext)\nlibrary(dplyr)\nlibrary(ggplot2)\n\n#Determining the Book ID for the \"Andersen's Fairy Tales\" in Project Gutenberg\ngutenberg_works(title == \"Andersen's Fairy Tales\")\n\n# A tibble: 1 × 8\n  gutenberg_id title     author gutenberg_author_id language gutenberg_bookshelf\n         &lt;int&gt; &lt;chr&gt;     &lt;chr&gt;                &lt;int&gt; &lt;chr&gt;    &lt;chr&gt;              \n1         1597 Andersen… Ander…                2298 en       Best Books Ever Li…\n# ℹ 2 more variables: rights &lt;chr&gt;, has_text &lt;lgl&gt;\n\n#Downloading the book with the book ID procured in the previous step into the object \"andersens_text\"\nandersens_text &lt;- gutenberg_download(1597)"
  },
  {
    "objectID": "data-exercise/data-exercise.html#processing-the-data",
    "href": "data-exercise/data-exercise.html#processing-the-data",
    "title": "Data Exercise",
    "section": "Processing the Data",
    "text": "Processing the Data\nThe following step is used to restructure the data sets for easier analysis.I then removed any unnecessary words. The frequency of the remaining words are then recorded.\n\n#Tokenizing the text and transforming it into a tidy data structure with the 'unnest_tokens' function from 'tidytext'. This restructures the dataset to a on-token-per-row format. \nandersen_tokens &lt;- andersens_text %&gt;%\n  unnest_tokens(word, text)\n\n#As explained the resource above, the following lines remove stop words or extremely common words. \ndata(stop_words)\ntidy_books &lt;-andersen_tokens %&gt;%\n  anti_join(stop_words)\n\n#The following lines uses the function count() to determine the frequency of each word and apply it to an object called 'word_freq'  \nword_freq &lt;- tidy_books %&gt;%\n  count(word, sort = TRUE)"
  },
  {
    "objectID": "data-exercise/data-exercise.html#plotting-and-visualizing-the-data",
    "href": "data-exercise/data-exercise.html#plotting-and-visualizing-the-data",
    "title": "Data Exercise",
    "section": "Plotting and Visualizing the Data",
    "text": "Plotting and Visualizing the Data\nI created a bar graph to better visualize the frequency of each words.\n\n##I then use the package ggplot2 to visualize my word frequency\nggplot(head(word_freq, 10), aes(x = reorder(word, n), y = n)) +\n  geom_col() +\n  coord_flip() +\n  xlab(\"# of Occurence\")+\n  ylab(\"Words\")\n\n\n\n  labs(title = \"Top 10 Words in Andersen's Fairy Tales\")\n\n$title\n[1] \"Top 10 Words in Andersen's Fairy Tales\"\n\nattr(,\"class\")\n[1] \"labels\"\n\n#The tidytextmining website provided this format of graphing the plot, and I readjusted it to fit my data set. I graphed this one to see any words with greater occurance than 50. \n tidy_books %&gt;%\n    count(word, sort = TRUE) %&gt;%\n    filter(n &gt; 50) %&gt;%\n    mutate(word = reorder(word, n)) %&gt;%\n    ggplot(aes(n, word)) +\n    geom_col() +\n    xlab(\"# of Occurence\")+\n    ylab(\"Words\")+\n    labs(title = \"Most Common Words\")"
  },
  {
    "objectID": "data-exercise/data-exercise.html#conclusion",
    "href": "data-exercise/data-exercise.html#conclusion",
    "title": "Data Exercise",
    "section": "Conclusion",
    "text": "Conclusion\nThe most common word in the book “Andersen’s Fairy Tale” is Gerda, which is the name of one of the characters in “The Snow Queen”, one of his tales. Of the other frequently used words, most of them were common words like ‘tree’ or ‘looked’. I imagine moving forward, if I were to continue analyzing this book, I would find a way to omit these other common words."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html",
    "href": "cdcdata-exercise/cdcdata-exercise.html",
    "title": "CDC-Data Exercise",
    "section": "",
    "text": "The following data sets was provided from the National Center for Health Statistics (NCHS) and was found on the CDC’s data website. The data summarizes information regarding leading causes of death for United States’ residents. The data was collected from death certificates in the 50 states and the District of Columbia from 1999-2017. It can be found in the following link:"
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#loading-data-set",
    "href": "cdcdata-exercise/cdcdata-exercise.html#loading-data-set",
    "title": "CDC-Data Exercise",
    "section": "Loading Data Set",
    "text": "Loading Data Set\n\n#Required packages are loaded. These packages are for data processing.cleaning, visualizing, file referencing, creating tables, etc.\nlibrary(dplyr)   \nlibrary(tidyr)   \nlibrary(ggplot2) \nlibrary(here)    \nlibrary(skimr)   \nlibrary(knitr)  \nlibrary(kableExtra)\nlibrary(lme4)\n\nThe data set has 6 variables and 10,686 observations. The variables include:\n\nYear\nX113.Cause.Name (the Cause of Death with regards to NCHS 113 Select Causes of Death)\nCause.Name (cause of death)\nState\nDeaths (number of deaths)\nAge.adjusted.Death.Rate (Age-adjusted death rates per 100,000 population)\n\n\n#Reading in the .csv file into the object \"cause_of_death\"\ncdc_data &lt;- read.csv(here(\"cdcdata-exercise\", \"Leading_Cause_of_Death.csv\"))\n\n#Summarizing \nsummary(cdc_data)\n\n      Year      X113.Cause.Name     Cause.Name           State          \n Min.   :1999   Length:10868       Length:10868       Length:10868      \n 1st Qu.:2003   Class :character   Class :character   Class :character  \n Median :2008   Mode  :character   Mode  :character   Mode  :character  \n Mean   :2008                                                           \n 3rd Qu.:2013                                                           \n Max.   :2017                                                           \n     Deaths        Age.adjusted.Death.Rate\n Min.   :     21   Min.   :   2.6         \n 1st Qu.:    612   1st Qu.:  19.2         \n Median :   1718   Median :  35.9         \n Mean   :  15460   Mean   : 127.6         \n 3rd Qu.:   5756   3rd Qu.: 151.7         \n Max.   :2813503   Max.   :1087.3         \n\nstr(cdc_data)\n\n'data.frame':   10868 obs. of  6 variables:\n $ Year                   : int  2017 2017 2017 2017 2017 2017 2017 2017 2017 2017 ...\n $ X113.Cause.Name        : chr  \"Accidents (unintentional injuries) (V01-X59,Y85-Y86)\" \"Accidents (unintentional injuries) (V01-X59,Y85-Y86)\" \"Accidents (unintentional injuries) (V01-X59,Y85-Y86)\" \"Accidents (unintentional injuries) (V01-X59,Y85-Y86)\" ...\n $ Cause.Name             : chr  \"Unintentional injuries\" \"Unintentional injuries\" \"Unintentional injuries\" \"Unintentional injuries\" ...\n $ State                  : chr  \"United States\" \"Alabama\" \"Alaska\" \"Arizona\" ...\n $ Deaths                 : int  169936 2703 436 4184 1625 13840 3037 2078 608 427 ...\n $ Age.adjusted.Death.Rate: num  49.4 53.8 63.7 56.2 51.8 33.2 53.6 53.2 61.9 61 ...\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe Age-adjusted death rates (per 100,000 population) are based the 2000 US standard population. The death rates for post 2010, uses the census required US standard population of 2010. When reviewing age-adjusted death rates, look below for more context:\n Missouri Department of Health’s Definition:  (Missouri Department of Health & Senior Services)\nAge-Adjusted Death Rates (AADR) = \\(\\sum (ASDR \\times \\text{standard proportion})\\)\nAge-specific Death Rate (ASDR) = \\(\\frac{\\text{deaths in age group}}{\\text{estimated population of that age group}} \\times 100,000\\).\n CDC’s Definition (CDC, 2022) \n\\(\\sum_{i=1}^{n} {r_i \\times (p_i / P)}{}\\)\n\\(r_i = \\text{rate in age group } i \\text{ in the population of interest}\\)\n\\(p_i = \\text{standard population in age group } i\\)\n\\(P = \\sum_{i=1}^{n} \\frac{p_i}{n}\\)\n\\(n = \\text{total number of age groups over the age range of the age-adjusted rate}\\)"
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#processing-and-cleaning-data-set",
    "href": "cdcdata-exercise/cdcdata-exercise.html#processing-and-cleaning-data-set",
    "title": "CDC-Data Exercise",
    "section": "Processing and Cleaning Data Set",
    "text": "Processing and Cleaning Data Set\nI first renamed the column names in the data set, as they were not too clear in what they represented. I then removed one of of the column in the data set, as it became redundant and was comparable to another column. I chose the Cause of Death column over Cause of Death_X113 column for simplicity sake, as that column also included other information not relevant and required cleaning. I then removed the rows from certain columns that did not bring any legitimate or viable information. I then used the na.omit() function to omit any rows that had any non-answered columns. As the number of observations did not change, I could deduce that there were none. I then adjusted the years column into year ranges and made them continuous for greater ease of use.\n\n# Renaming the columns for clarity and using str() to determine if the change of name took.\nnames(cdc_data) &lt;- c(\"Year\", \"Cause of Death_X113\", \"Cause of Death\", \"State\", \"Number of Deaths\", \"Age-Adjusted Death Rates\")\nstr(cdc_data)\n\n'data.frame':   10868 obs. of  6 variables:\n $ Year                    : int  2017 2017 2017 2017 2017 2017 2017 2017 2017 2017 ...\n $ Cause of Death_X113     : chr  \"Accidents (unintentional injuries) (V01-X59,Y85-Y86)\" \"Accidents (unintentional injuries) (V01-X59,Y85-Y86)\" \"Accidents (unintentional injuries) (V01-X59,Y85-Y86)\" \"Accidents (unintentional injuries) (V01-X59,Y85-Y86)\" ...\n $ Cause of Death          : chr  \"Unintentional injuries\" \"Unintentional injuries\" \"Unintentional injuries\" \"Unintentional injuries\" ...\n $ State                   : chr  \"United States\" \"Alabama\" \"Alaska\" \"Arizona\" ...\n $ Number of Deaths        : int  169936 2703 436 4184 1625 13840 3037 2078 608 427 ...\n $ Age-Adjusted Death Rates: num  49.4 53.8 63.7 56.2 51.8 33.2 53.6 53.2 61.9 61 ...\n\n#I removed the column `Cause of Death_X113` for simplicity sake, as it seemed redundant with the next column, which did not contain the cause of death codes. \ncdc_data &lt;- cdc_data %&gt;%\n  select(-`Cause of Death_X113`)\n\n#I removed any rows with columns in the \"State\" column that answered \"United States\"\ncdc_data &lt;- cdc_data %&gt;% \n  filter(State != \"United States\")\n#I removed any rows with columns in the \"Cause of Death\" column that answered \"All Causes\"\ncdc_data &lt;- cdc_data %&gt;%\n  filter(`Cause of Death`!= \"All causes\")\n\n#I used the na.omit() function to ensure the data set did not have any data that was NA\ncdc_data &lt;- na.omit(cdc_data)\n\n#With the column Years, I arranged them into ranges, so I may have an easier time performing any analysis later on with more distinct categorical levels\nbreaks &lt;- c(1999, 2000, 2003, 2006, 2009, 2012, 2015, 2018)\nlabels &lt;- c(\"1999\", \"2000-2002\", \"2003-2005\", \"2006-2008\", \"2009-2011\", \"2012-2014\", \"2015-2017\")\ncdc_data$Year_Range &lt;- cut(cdc_data$Year, breaks = breaks, labels = labels, include.lowest = TRUE)\n\nCreating the distinct ranges for the years were performed with ChatGPT 3.5. After cleaning the data, I was left with 9690 observation of 6 variables."
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#visualization-plots",
    "href": "cdcdata-exercise/cdcdata-exercise.html#visualization-plots",
    "title": "CDC-Data Exercise",
    "section": "Visualization/ Plots",
    "text": "Visualization/ Plots"
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#conclusion-and-discussions",
    "href": "cdcdata-exercise/cdcdata-exercise.html#conclusion-and-discussions",
    "title": "CDC-Data Exercise",
    "section": "Conclusion and Discussions",
    "text": "Conclusion and Discussions"
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#references",
    "href": "cdcdata-exercise/cdcdata-exercise.html#references",
    "title": "CDC-Data Exercise",
    "section": "References",
    "text": "References\n\nMissouri Department of Health and Senior Services. (n.d.). Age-adjusted rates. Retrieved from https://health.mo.gov/data/mica/CDP_MICA/AARate.html\nCenters for Disease Control and Prevention. (August 12, 2022). Age adjustment. Retrieved from https://www.cdc.gov/nchs/hus/sources-definitions/age-adjustment.htm\n\nThis section is contributed by Malika Dhakhwa\nThe original data includes 10 causes of death. There are 19 years of data for each of the causes of death for 51 states from 1999 to 2017. I simulated the categorical variables, Year, State and Cause of Death using these parameters. Combining these, I created a data frame ‘synthetic_data’ which has 9690 observations.\n\n#Generating a column of 19 years starting from 1999 to 2017. ChatGPT helped me to find out the expand.grid function.\nYear &lt;- 1999:2017\n#Generating 51 states assuming generic state names\nstates &lt;- paste(\"State\", 1:51) \n#Generating Cause of Death\ncauses_of_death &lt;- c(\"Alzheimer's disease\", \"Cancer\", \"CLRD\", \"Diabetes\", \"Heart disease\", \n                     \"Influenza and pneumonia\", \"Kidney disease\", \"Stroke\", \"Suicide\", \"Unintentional injuries\")\nsynthetic_data &lt;- expand.grid(Year = Year, State = states, Cause_of_Death = causes_of_death)\n\nstr(synthetic_data)\n\n'data.frame':   9690 obs. of  3 variables:\n $ Year          : int  1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 ...\n $ State         : Factor w/ 51 levels \"State 1\",\"State 2\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ Cause_of_Death: Factor w/ 10 levels \"Alzheimer's disease\",..: 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"out.attrs\")=List of 2\n  ..$ dim     : Named int [1:3] 19 51 10\n  .. ..- attr(*, \"names\")= chr [1:3] \"Year\" \"State\" \"Cause_of_Death\"\n  ..$ dimnames:List of 3\n  .. ..$ Year          : chr [1:19] \"Year=1999\" \"Year=2000\" \"Year=2001\" \"Year=2002\" ...\n  .. ..$ State         : chr [1:51] \"State=State 1\" \"State=State 2\" \"State=State 3\" \"State=State 4\" ...\n  .. ..$ Cause_of_Death: chr [1:10] \"Cause_of_Death=Alzheimer's disease\" \"Cause_of_Death=Cancer\" \"Cause_of_Death=CLRD\" \"Cause_of_Death=Diabetes\" ...\n\n\nI replaced the generic state with actual state names. ChatGPT helped me with the mapping.\n\n# Mapping of placeholder names to actual state names\nstate_mapping &lt;- setNames(c(\"Alabama\", \"Alaska\", \"Arizona\", \"Arkansas\", \"California\", \"Colorado\", \n                            \"Connecticut\", \"Delaware\", \"District of Columbia\", \"Florida\", \"Georgia\", \n                            \"Hawaii\", \"Idaho\", \"Illinois\", \"Indiana\", \"Iowa\", \"Kansas\", \"Kentucky\", \n                            \"Louisiana\", \"Maine\", \"Maryland\", \"Massachusetts\", \"Michigan\", \"Minnesota\", \n                            \"Mississippi\", \"Missouri\", \"Montana\", \"Nebraska\", \"Nevada\", \"New Hampshire\", \n                            \"New Jersey\", \"New Mexico\", \"New York\", \"North Carolina\", \"North Dakota\", \n                            \"Ohio\", \"Oklahoma\", \"Oregon\", \"Pennsylvania\", \"Rhode Island\", \"South Carolina\", \n                            \"South Dakota\", \"Tennessee\", \"Texas\", \"Utah\", \"Vermont\", \"Virginia\", \n                            \"Washington\", \"West Virginia\", \"Wisconsin\", \"Wyoming\"), \n                  paste(\"State\", 1:51))\n\n# Replacing the placeholder names in synthetic_data with actual state names using the mapping\nsynthetic_data$State &lt;- state_mapping[synthetic_data$State]\n\n# Checking for accuracy \nhead(synthetic_data$State)\n\n[1] \"Alabama\" \"Alabama\" \"Alabama\" \"Alabama\" \"Alabama\" \"Alabama\"\n\nstr(synthetic_data)\n\n'data.frame':   9690 obs. of  3 variables:\n $ Year          : int  1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 ...\n $ State         : chr  \"Alabama\" \"Alabama\" \"Alabama\" \"Alabama\" ...\n $ Cause_of_Death: Factor w/ 10 levels \"Alzheimer's disease\",..: 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"out.attrs\")=List of 2\n  ..$ dim     : Named int [1:3] 19 51 10\n  .. ..- attr(*, \"names\")= chr [1:3] \"Year\" \"State\" \"Cause_of_Death\"\n  ..$ dimnames:List of 3\n  .. ..$ Year          : chr [1:19] \"Year=1999\" \"Year=2000\" \"Year=2001\" \"Year=2002\" ...\n  .. ..$ State         : chr [1:51] \"State=State 1\" \"State=State 2\" \"State=State 3\" \"State=State 4\" ...\n  .. ..$ Cause_of_Death: chr [1:10] \"Cause_of_Death=Alzheimer's disease\" \"Cause_of_Death=Cancer\" \"Cause_of_Death=CLRD\" \"Cause_of_Death=Diabetes\" ...\n\nsummary(synthetic_data)\n\n      Year         State                           Cause_of_Death\n Min.   :1999   Length:9690        Alzheimer's disease    : 969  \n 1st Qu.:2003   Class :character   Cancer                 : 969  \n Median :2008   Mode  :character   CLRD                   : 969  \n Mean   :2008                      Diabetes               : 969  \n 3rd Qu.:2013                      Heart disease          : 969  \n Max.   :2017                      Influenza and pneumonia: 969  \n                                   (Other)                :3876  \n\n\nFor simulating ‘No. of deaths’ and ‘Age-adjusted death rates’ in the synthetic data, I use the estimates of Year, state and Cause of death on the log of ‘No. of deaths’ and ‘Age-adjusted death rates’ obtained from the original data. To do this, I first fitted linear models using the original data.\n\n#Renaming the columns of the original data temporarily for fitting the model to avoid the spaces and simplifying the syntax.\nnames(cdc_data)[names(cdc_data) == \"Number of Deaths\"] &lt;- \"Number_of_Deaths\"\nnames(cdc_data)[names(cdc_data) == \"Cause of Death\"] &lt;- \"Cause_of_Death\"\nnames(cdc_data)[names(cdc_data) == \"Age-Adjusted Death Rates\"] &lt;- \"AADR\"\n\n#Fitting the linear model for log of 'Number of Deaths'\n\nlm_log_Deaths &lt;- lm(log(Number_of_Deaths) ~ Year + factor(State) + factor(Cause_of_Death), data = cdc_data)\nlm_log_Deaths\n\n\nCall:\nlm(formula = log(Number_of_Deaths) ~ Year + factor(State) + factor(Cause_of_Death), \n    data = cdc_data)\n\nCoefficients:\n                                  (Intercept)  \n                                   -15.499892  \n                                         Year  \n                                     0.011346  \n                          factor(State)Alaska  \n                                    -2.631253  \n                         factor(State)Arizona  \n                                     0.003643  \n                        factor(State)Arkansas  \n                                    -0.457314  \n                      factor(State)California  \n                                     1.620484  \n                        factor(State)Colorado  \n                                    -0.379651  \n                     factor(State)Connecticut  \n                                    -0.565903  \n                        factor(State)Delaware  \n                                    -1.891678  \n            factor(State)District of Columbia  \n                                    -2.497995  \n                         factor(State)Florida  \n                                     1.236063  \n                         factor(State)Georgia  \n                                     0.376874  \n                          factor(State)Hawaii  \n                                    -1.649134  \n                           factor(State)Idaho  \n                                    -1.416394  \n                        factor(State)Illinois  \n                                     0.747390  \n                         factor(State)Indiana  \n                                     0.202046  \n                            factor(State)Iowa  \n                                    -0.550949  \n                          factor(State)Kansas  \n                                    -0.609990  \n                        factor(State)Kentucky  \n                                    -0.085395  \n                       factor(State)Louisiana  \n                                    -0.109299  \n                           factor(State)Maine  \n                                    -1.293221  \n                        factor(State)Maryland  \n                                    -0.191319  \n                   factor(State)Massachusetts  \n                                     0.061227  \n                        factor(State)Michigan  \n                                     0.595212  \n                       factor(State)Minnesota  \n                                    -0.214052  \n                     factor(State)Mississippi  \n                                    -0.478931  \n                        factor(State)Missouri  \n                                     0.190847  \n                         factor(State)Montana  \n                                    -1.654428  \n                        factor(State)Nebraska  \n                                    -1.144469  \n                          factor(State)Nevada  \n                                    -0.923959  \n                   factor(State)New Hampshire  \n                                    -1.527223  \n                      factor(State)New Jersey  \n                                     0.294695  \n                      factor(State)New Mexico  \n                                    -1.063613  \n                        factor(State)New York  \n                                     0.990054  \n                  factor(State)North Carolina  \n                                     0.521378  \n                    factor(State)North Dakota  \n                                    -2.019163  \n                            factor(State)Ohio  \n                                     0.818885  \n                        factor(State)Oklahoma  \n                                    -0.248317  \n                          factor(State)Oregon  \n                                    -0.415952  \n                    factor(State)Pennsylvania  \n                                     0.947478  \n                    factor(State)Rhode Island  \n                                    -1.675424  \n                  factor(State)South Carolina  \n                                    -0.152719  \n                    factor(State)South Dakota  \n                                    -1.840267  \n                       factor(State)Tennessee  \n                                     0.238119  \n                           factor(State)Texas  \n                                     1.249413  \n                            factor(State)Utah  \n                                    -1.146016  \n                         factor(State)Vermont  \n                                    -2.247963  \n                        factor(State)Virginia  \n                                     0.221954  \n                      factor(State)Washington  \n                                     0.016514  \n                   factor(State)West Virginia  \n                                    -0.781371  \n                       factor(State)Wisconsin  \n                                     0.017620  \n                         factor(State)Wyoming  \n                                    -2.325557  \n                 factor(Cause_of_Death)Cancer  \n                                     2.017137  \n                   factor(Cause_of_Death)CLRD  \n                                     0.600338  \n               factor(Cause_of_Death)Diabetes  \n                                    -0.034050  \n          factor(Cause_of_Death)Heart disease  \n                                     2.101562  \nfactor(Cause_of_Death)Influenza and pneumonia  \n                                    -0.304687  \n         factor(Cause_of_Death)Kidney disease  \n                                    -0.588815  \n                 factor(Cause_of_Death)Stroke  \n                                     0.625631  \n                factor(Cause_of_Death)Suicide  \n                                    -0.666365  \n factor(Cause_of_Death)Unintentional injuries  \n                                     0.535392  \n\n#Fitting the linear model for 'Age-Adjusted Death Rates'\nlm_AADR &lt;- lm(AADR ~ Year + factor(State) + factor(Cause_of_Death), data = cdc_data)\nlm_AADR\n\n\nCall:\nlm(formula = AADR ~ Year + factor(State) + factor(Cause_of_Death), \n    data = cdc_data)\n\nCoefficients:\n                                  (Intercept)  \n                                    1882.7197  \n                                         Year  \n                                      -0.9192  \n                          factor(State)Alaska  \n                                     -14.7132  \n                         factor(State)Arizona  \n                                     -16.9621  \n                        factor(State)Arkansas  \n                                      -1.0926  \n                      factor(State)California  \n                                     -17.7700  \n                        factor(State)Colorado  \n                                     -19.4279  \n                     factor(State)Connecticut  \n                                     -20.4679  \n                        factor(State)Delaware  \n                                     -11.9584  \n            factor(State)District of Columbia  \n                                      -9.8437  \n                         factor(State)Florida  \n                                     -17.4747  \n                         factor(State)Georgia  \n                                      -8.0547  \n                          factor(State)Hawaii  \n                                     -25.7053  \n                           factor(State)Idaho  \n                                     -14.9195  \n                        factor(State)Illinois  \n                                     -12.5142  \n                         factor(State)Indiana  \n                                      -6.7821  \n                            factor(State)Iowa  \n                                     -14.4537  \n                          factor(State)Kansas  \n                                     -12.7321  \n                        factor(State)Kentucky  \n                                       0.9379  \n                       factor(State)Louisiana  \n                                      -0.8732  \n                           factor(State)Maine  \n                                     -12.4874  \n                        factor(State)Maryland  \n                                     -15.1758  \n                   factor(State)Massachusetts  \n                                     -19.2879  \n                        factor(State)Michigan  \n                                      -8.9100  \n                       factor(State)Minnesota  \n                                     -22.2426  \n                     factor(State)Mississippi  \n                                       4.2426  \n                        factor(State)Missouri  \n                                      -5.8016  \n                         factor(State)Montana  \n                                     -13.5532  \n                        factor(State)Nebraska  \n                                     -16.5868  \n                          factor(State)Nevada  \n                                      -8.8389  \n                   factor(State)New Hampshire  \n                                     -15.5737  \n                      factor(State)New Jersey  \n                                     -16.7442  \n                      factor(State)New Mexico  \n                                     -14.9495  \n                        factor(State)New York  \n                                     -17.0289  \n                  factor(State)North Carolina  \n                                      -9.3574  \n                    factor(State)North Dakota  \n                                     -16.4347  \n                            factor(State)Ohio  \n                                      -7.3579  \n                        factor(State)Oklahoma  \n                                       0.9063  \n                          factor(State)Oregon  \n                                     -16.0874  \n                    factor(State)Pennsylvania  \n                                     -11.1116  \n                    factor(State)Rhode Island  \n                                     -15.7116  \n                  factor(State)South Carolina  \n                                      -6.5289  \n                    factor(State)South Dakota  \n                                     -13.9963  \n                       factor(State)Tennessee  \n                                      -1.3111  \n                           factor(State)Texas  \n                                     -11.8305  \n                            factor(State)Utah  \n                                     -20.7479  \n                         factor(State)Vermont  \n                                     -15.5589  \n                        factor(State)Virginia  \n                                     -13.6826  \n                      factor(State)Washington  \n                                     -15.7000  \n                   factor(State)West Virginia  \n                                       0.8032  \n                       factor(State)Wisconsin  \n                                     -14.9347  \n                         factor(State)Wyoming  \n                                     -11.5605  \n                 factor(Cause_of_Death)Cancer  \n                                     153.5837  \n                   factor(Cause_of_Death)CLRD  \n                                      19.6052  \n               factor(Cause_of_Death)Diabetes  \n                                      -1.6291  \n          factor(Cause_of_Death)Heart disease  \n                                     172.9024  \nfactor(Cause_of_Death)Influenza and pneumonia  \n                                      -6.8265  \n         factor(Cause_of_Death)Kidney disease  \n                                     -10.9622  \n                 factor(Cause_of_Death)Stroke  \n                                      20.8678  \n                factor(Cause_of_Death)Suicide  \n                                     -11.5956  \n factor(Cause_of_Death)Unintentional injuries  \n                                      18.4553  \n\n\nI used the above coefficients to calculate the predicted log of ‘Number of Deaths’ for each observation in the synthetic data and then exponentiate predicted values to get the original Number of Deaths. I followed similar steps for the Age-adjusted Death Rate. ChatGPT helped me with finding the ‘predict’ function to do this.\n\n# Calculating the predicted values of log of deaths for the synthetic data\npredicted_log_deaths &lt;- predict(lm_log_Deaths, newdata = synthetic_data, type = \"response\")\n\n# Converting log of 'Number of Deaths' back to the original scale and adding the column to the synthetic data\nsynthetic_data$Number_of_Deaths &lt;- round(exp(predicted_log_deaths))\n\n# Calculating the predicted values of Age-adjusted death rates in the column\npredicted_AADR &lt;- predict(lm_AADR, newdata = synthetic_data, type = \"response\")\n\n# Adding the predicted Age-adjusted death rates to the synthetic data\nsynthetic_data$Age_adjusted_Death_Rate &lt;- round(predicted_AADR)\n\nFollowing my collaborator, I created a table of summary statistics to compare the distributions in the original data and the synthetic data.\n\n#Creating the objects to store the two continuous variables\nsummary_variable1 &lt;- summary(synthetic_data$Number_of_Deaths)\nsummary_variable2 &lt;- summary(synthetic_data$Age_adjusted_Death_Rate)\n\n#I then created a table with the summary statistics of both variables\nsummary_table &lt;- data.frame(\n  Variable = c(\"Number_of_Deaths\", \"Age_adjusted_Death_Rate\"),\n  Min = c(summary_variable1[\"Min.\"], summary_variable2[\"Min.\"]),\n  Q1 = c(summary_variable1[\"1st Qu.\"], summary_variable2[\"1st Qu.\"]),\n  Median = c(summary_variable1[\"Median\"], summary_variable2[\"Median\"]),\n  Mean = c(summary_variable1[\"Mean\"], summary_variable2[\"Mean\"]),\n  StDev = c(sd(summary_variable1), sd(summary_variable2)),\n  Q3 = c(summary_variable1[\"3rd Qu.\"], summary_variable2[\"3rd Qu.\"]),\n  Max = c(summary_variable1[\"Max.\"], summary_variable2[\"Max.\"])\n)\n\n#Printing the table with the summary statistics of the two variables\nkable(summary_table, \n      caption = \"Summary statistics of Synthetic Data\") %&gt;%\n  kable_styling(full_width = TRUE)\n\n\nSummary statistics of Synthetic Data\n\n\nVariable\nMin\nQ1\nMedian\nMean\nStDev\nQ3\nMax\n\n\n\n\nNumber_of_Deaths\n49\n538\n1397\n3646.45573\n26508.08390\n3349.75\n66629\n\n\nAge_adjusted_Death_Rate\n-9\n18\n34\n60.47245\n81.77695\n53.00\n222\n\n\n\n\n\n\n\nThe distribution of Number of Deaths and Age-adjusted Death Rates in the synthetic data are closely aligned with the original CDC data with the exception of the minimum values. The Age-adjusted Death Rates resulted a negative number (-9) for the minimum which is not meaningful. Upon a detailed review, I found that 0.59% (57) of the total observations have negative values for the Age-adjusted Death Rate, highlighting a need for correction to ensure the meaningfulness of these observations. Several strategies, including imputation and treating these as missing values, offer viable solutions.\n\n#Checking counts of negative values\n\nsynthetic_data$Age_adjusted_Death_Rate[synthetic_data$Age_adjusted_Death_Rate &lt; 0]\n\n [1] -1 -2 -3 -4 -1 -2 -1 -2 -3 -1 -2 -2 -3 -4 -5 -6 -7 -8 -1 -2 -1 -2 -3 -4 -5\n[26] -1 -2 -3 -1 -1 -1 -2 -1 -2 -2 -3 -1 -2 -3 -4 -5 -6 -7 -8 -9 -1 -2 -1 -1 -2\n[51] -3 -4 -5 -1 -2 -3 -4\n\n\nThe histogram of the ‘Number of Deaths’ on the synthetic data resembles with that of the original data.The Age-adjusted Death Rates have lesser variability in the synthetic data.\n\n#Plotted the continuous variables\nggplot(synthetic_data, aes(x = `Number_of_Deaths`)) +\n  geom_histogram(binwidth = 1000, fill = \"skyblue\", color = \"black\") +\n  ggtitle('Histogram of Number of Deaths  using Synthetic Data') +\n  xlab('Number of Deaths') +\n  ylab('Frequency') +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\nggplot(synthetic_data, aes(x = `Age_adjusted_Death_Rate`)) +\n  geom_histogram(binwidth = 10, fill = \"lightgreen\", color = \"black\") +\n  ggtitle('Histogram of Age-Adjusted Death Rates  from Synthetic Data') +\n  xlab('Age-Adjusted Death Rates') +\n  ylab('Frequency') +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\nFollowing my collaborator’s work, I summarized and tabulated the categorical variables to check frequency. As expected, the results are similar to the original data.\n\n#Determining the summary of each year category\nsummary(synthetic_data$Year==1999)\n\n   Mode   FALSE    TRUE \nlogical    9180     510 \n\n#Tabulating the categorical variables for frequency of the output following Kelly's method.\ncause_of_death_table &lt;- table(synthetic_data$Cause_of_Death )\ncause_of_death_percentages &lt;- prop.table(cause_of_death_table)*100\nprint(cause_of_death_percentages)\n\n\n    Alzheimer's disease                  Cancer                    CLRD \n                     10                      10                      10 \n               Diabetes           Heart disease Influenza and pneumonia \n                     10                      10                      10 \n         Kidney disease                  Stroke                 Suicide \n                     10                      10                      10 \n Unintentional injuries \n                     10 \n\nstate_table &lt;- table(synthetic_data$State)\nstate_percentages &lt;- prop.table(state_table)*100\nprint(state_percentages)\n\n\n             Alabama               Alaska              Arizona \n            1.960784             1.960784             1.960784 \n            Arkansas           California             Colorado \n            1.960784             1.960784             1.960784 \n         Connecticut             Delaware District of Columbia \n            1.960784             1.960784             1.960784 \n             Florida              Georgia               Hawaii \n            1.960784             1.960784             1.960784 \n               Idaho             Illinois              Indiana \n            1.960784             1.960784             1.960784 \n                Iowa               Kansas             Kentucky \n            1.960784             1.960784             1.960784 \n           Louisiana                Maine             Maryland \n            1.960784             1.960784             1.960784 \n       Massachusetts             Michigan            Minnesota \n            1.960784             1.960784             1.960784 \n         Mississippi             Missouri              Montana \n            1.960784             1.960784             1.960784 \n            Nebraska               Nevada        New Hampshire \n            1.960784             1.960784             1.960784 \n          New Jersey           New Mexico             New York \n            1.960784             1.960784             1.960784 \n      North Carolina         North Dakota                 Ohio \n            1.960784             1.960784             1.960784 \n            Oklahoma               Oregon         Pennsylvania \n            1.960784             1.960784             1.960784 \n        Rhode Island       South Carolina         South Dakota \n            1.960784             1.960784             1.960784 \n           Tennessee                Texas                 Utah \n            1.960784             1.960784             1.960784 \n             Vermont             Virginia           Washington \n            1.960784             1.960784             1.960784 \n       West Virginia            Wisconsin              Wyoming \n            1.960784             1.960784             1.960784 \n\nyear_table &lt;- table(synthetic_data$Year)\nyear_percentages &lt;- prop.table(year_table)*100\nprint(year_percentages)\n\n\n    1999     2000     2001     2002     2003     2004     2005     2006 \n5.263158 5.263158 5.263158 5.263158 5.263158 5.263158 5.263158 5.263158 \n    2007     2008     2009     2010     2011     2012     2013     2014 \n5.263158 5.263158 5.263158 5.263158 5.263158 5.263158 5.263158 5.263158 \n    2015     2016     2017 \n5.263158 5.263158 5.263158"
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#cdcs-definition",
    "href": "cdcdata-exercise/cdcdata-exercise.html#cdcs-definition",
    "title": "CDC-Data Exercise",
    "section": "CDC’s Definition",
    "text": "CDC’s Definition\n\\(\\sum_{i=1}^{n} {r_i \\times (p_i / P)}{}\\)"
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#some-visualization-plots",
    "href": "cdcdata-exercise/cdcdata-exercise.html#some-visualization-plots",
    "title": "CDC-Data Exercise",
    "section": "Some Visualization/ Plots",
    "text": "Some Visualization/ Plots\nUsing the summary(cdc_data$Year==) command, I was able to discern that each year collected 572 observations. I double checked this by entering the same command in the console to ensure that each year had the same number of observations. I used the table() function to determine the number of categories in the Cauase of Death column. From this I was able to determine that there was 9 possible answer choices for that column, and each cause of death had the same number of observation in this data set.\n\n#Determining the summary of each year category\nsummary(cdc_data$Year==1999)\n\n   Mode   FALSE    TRUE \nlogical   10296     572 \n\n#Tabulating the categorical variables to discern the frequency of the output\ncause_of_death &lt;- table(cdc_data$`Cause of Death`)\ncause_of_death_percentages &lt;- prop.table(cause_of_death)*100\nprint(cause_of_death_percentages)\n\n\n             All causes     Alzheimer's disease                  Cancer \n               9.090909                9.090909                9.090909 \n                   CLRD                Diabetes           Heart disease \n               9.090909                9.090909                9.090909 \nInfluenza and pneumonia          Kidney disease                  Stroke \n               9.090909                9.090909                9.090909 \n                Suicide  Unintentional injuries \n               9.090909                9.090909 \n\nstate &lt;- table(cdc_data$State)\nstate_percentages &lt;- prop.table(state)*100\nprint(state_percentages)\n\n\n             Alabama               Alaska              Arizona \n            1.923077             1.923077             1.923077 \n            Arkansas           California             Colorado \n            1.923077             1.923077             1.923077 \n         Connecticut             Delaware District of Columbia \n            1.923077             1.923077             1.923077 \n             Florida              Georgia               Hawaii \n            1.923077             1.923077             1.923077 \n               Idaho             Illinois              Indiana \n            1.923077             1.923077             1.923077 \n                Iowa               Kansas             Kentucky \n            1.923077             1.923077             1.923077 \n           Louisiana                Maine             Maryland \n            1.923077             1.923077             1.923077 \n       Massachusetts             Michigan            Minnesota \n            1.923077             1.923077             1.923077 \n         Mississippi             Missouri              Montana \n            1.923077             1.923077             1.923077 \n            Nebraska               Nevada        New Hampshire \n            1.923077             1.923077             1.923077 \n          New Jersey           New Mexico             New York \n            1.923077             1.923077             1.923077 \n      North Carolina         North Dakota                 Ohio \n            1.923077             1.923077             1.923077 \n            Oklahoma               Oregon         Pennsylvania \n            1.923077             1.923077             1.923077 \n        Rhode Island       South Carolina         South Dakota \n            1.923077             1.923077             1.923077 \n           Tennessee                Texas        United States \n            1.923077             1.923077             1.923077 \n                Utah              Vermont             Virginia \n            1.923077             1.923077             1.923077 \n          Washington        West Virginia            Wisconsin \n            1.923077             1.923077             1.923077 \n             Wyoming \n            1.923077 \n\nyear &lt;- table(cdc_data$Year)\nyear_percentages &lt;- prop.table(year)*100\nprint(year_percentages)\n\n\n    1999     2000     2001     2002     2003     2004     2005     2006 \n5.263158 5.263158 5.263158 5.263158 5.263158 5.263158 5.263158 5.263158 \n    2007     2008     2009     2010     2011     2012     2013     2014 \n5.263158 5.263158 5.263158 5.263158 5.263158 5.263158 5.263158 5.263158 \n    2015     2016     2017 \n5.263158 5.263158 5.263158"
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#conclusion",
    "href": "cdcdata-exercise/cdcdata-exercise.html#conclusion",
    "title": "CDC-Data Exercise",
    "section": "Conclusion",
    "text": "Conclusion"
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#descriptive-analysis-of-processed-data",
    "href": "cdcdata-exercise/cdcdata-exercise.html#descriptive-analysis-of-processed-data",
    "title": "CDC-Data Exercise",
    "section": "Descriptive Analysis of Processed Data",
    "text": "Descriptive Analysis of Processed Data\n Categorical Variables \nUsing the summary(cdc_data$Year==) command, I was able to discern that each year collected 572 observations. I double checked this by entering the same command in the console to ensure that each year had the same number of observations. I used the table() function to determine the number of categories in the Cause of Death column. From this I was able to determine that there was 9 possible answer choices for that column, and each cause of death had the same number of observation in this data set. I then decided to calculate the proportion each of the answers make for each categorical variable.\n\n#Determining the summary of each year category\nsummary(cdc_data$Year==1999)\n\n   Mode   FALSE    TRUE \nlogical    9180     510 \n\n#Tabulating the categorical variables to discern the frequency of the output. I applied to result of the table() function an object for each categorical variable. I then used pop.table() function to determine the proportion of each answer and printed it. I discovered the prop.table() function for ChatGPT 3.5.\ncause_of_death_table &lt;- table(cdc_data$`Cause of Death`)\ncause_of_death_percentages &lt;- prop.table(cause_of_death_table)*100\nprint(cause_of_death_percentages)\n\n\n    Alzheimer's disease                  Cancer                    CLRD \n                     10                      10                      10 \n               Diabetes           Heart disease Influenza and pneumonia \n                     10                      10                      10 \n         Kidney disease                  Stroke                 Suicide \n                     10                      10                      10 \n Unintentional injuries \n                     10 \n\nstate_table &lt;- table(cdc_data$State)\nstate_percentages &lt;- prop.table(state_table)*100\nprint(state_percentages)\n\n\n             Alabama               Alaska              Arizona \n            1.960784             1.960784             1.960784 \n            Arkansas           California             Colorado \n            1.960784             1.960784             1.960784 \n         Connecticut             Delaware District of Columbia \n            1.960784             1.960784             1.960784 \n             Florida              Georgia               Hawaii \n            1.960784             1.960784             1.960784 \n               Idaho             Illinois              Indiana \n            1.960784             1.960784             1.960784 \n                Iowa               Kansas             Kentucky \n            1.960784             1.960784             1.960784 \n           Louisiana                Maine             Maryland \n            1.960784             1.960784             1.960784 \n       Massachusetts             Michigan            Minnesota \n            1.960784             1.960784             1.960784 \n         Mississippi             Missouri              Montana \n            1.960784             1.960784             1.960784 \n            Nebraska               Nevada        New Hampshire \n            1.960784             1.960784             1.960784 \n          New Jersey           New Mexico             New York \n            1.960784             1.960784             1.960784 \n      North Carolina         North Dakota                 Ohio \n            1.960784             1.960784             1.960784 \n            Oklahoma               Oregon         Pennsylvania \n            1.960784             1.960784             1.960784 \n        Rhode Island       South Carolina         South Dakota \n            1.960784             1.960784             1.960784 \n           Tennessee                Texas                 Utah \n            1.960784             1.960784             1.960784 \n             Vermont             Virginia           Washington \n            1.960784             1.960784             1.960784 \n       West Virginia            Wisconsin              Wyoming \n            1.960784             1.960784             1.960784 \n\nyear_table &lt;- table(cdc_data$Year)\nyear_percentages &lt;- prop.table(year_table)*100\nprint(year_percentages)\n\n\n    1999     2000     2001     2002     2003     2004     2005     2006 \n5.263158 5.263158 5.263158 5.263158 5.263158 5.263158 5.263158 5.263158 \n    2007     2008     2009     2010     2011     2012     2013     2014 \n5.263158 5.263158 5.263158 5.263158 5.263158 5.263158 5.263158 5.263158 \n    2015     2016     2017 \n5.263158 5.263158 5.263158 \n\n\nFrom the answers above, I was able to determine that all of the categorical variables in this data set have the same percentage for each category in a variable.\n\n Continuous Variables \nI then plotted the continuous variables: Number of Deaths and Age-Adjusted Death Rates to determine its distribution. The summary statistics of the variables were shown in the object summary_table. I then printed the table with the knitr package and the kableEXTRA package. The latter package was discovered when attempting to adjust the visual of the table when using ChatGPT 3.5.\n\n#Plotted the continuous variables\nggplot(cdc_data, aes(x = `Number of Deaths`)) +\n  geom_histogram(binwidth = 1000, fill = \"skyblue\", color = \"black\") +\n  ggtitle('Histogram of Number of Deaths') +\n  xlab('Number of Deaths') +\n  ylab('Frequency') +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\nggplot(cdc_data, aes(x = `Age-Adjusted Death Rates`)) +\n  geom_histogram(binwidth = 10, fill = \"lightgreen\", color = \"black\") +\n  ggtitle('Histogram of Age-Adjusted Death Rates') +\n  xlab('Age-Adjusted Death Rates') +\n  ylab('Frequency') +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n#I then created the objects to store the two continuous variables\nsummary_variable1 &lt;- summary(cdc_data$`Number of Deaths`)\nsummary_variable2 &lt;- summary(cdc_data$`Age-Adjusted Death Rates`)\n\n#I then created a table with the summary statistics of both variables\nsummary_table &lt;- data.frame(\n  Variable = c(\"Number of Deaths\", \"Age-Adjusted Death Rates\"),\n  Min = c(summary_variable1[\"Min.\"], summary_variable2[\"Min.\"]),\n  Q1 = c(summary_variable1[\"1st Qu.\"], summary_variable2[\"1st Qu.\"]),\n  Median = c(summary_variable1[\"Median\"], summary_variable2[\"Median\"]),\n  Mean = c(summary_variable1[\"Mean\"], summary_variable2[\"Mean\"]),\n  StDev = c(sd(summary_variable1), sd(summary_variable2)),\n  Q3 = c(summary_variable1[\"3rd Qu.\"], summary_variable2[\"3rd Qu.\"]),\n  Max = c(summary_variable1[\"Max.\"], summary_variable2[\"Max.\"])\n)\n#Printing the table with the summary statistics of the two variables\nkable(summary_table, \n      caption = \"Summary statistics of Number of Deaths and Age-Adjusted Death Rates\") %&gt;%\n  kable_styling(full_width = TRUE)\n\n\nSummary statistics of Number of Deaths and Age-Adjusted Death Rates\n\n\nVariable\nMin\nQ1\nMedian\nMean\nStDev\nQ3\nMax\n\n\n\n\nNumber of Deaths\n21.0\n536.0\n1413.00\n3744.12621\n28670.502\n3257.75\n71930.0\n\n\nAge-Adjusted Death Rates\n2.6\n18.3\n31.45\n60.47208\n129.967\n55.00\n347.4"
  },
  {
    "objectID": "cdcdata-exercise/cdcdata-exercise.html#conclusion-and-discussion",
    "href": "cdcdata-exercise/cdcdata-exercise.html#conclusion-and-discussion",
    "title": "CDC-Data Exercise",
    "section": "Conclusion and Discussion",
    "text": "Conclusion and Discussion\nThe data set that was provided by the CDC was fairly clean and did not require much cleaning or processing. When attempting to analyze the individual variables, it became apparent that the categorical variables had a more uniform distribution, with an equal number of observations per category. The continuous variables when plotted showed a more exponential distribution, with many of it’s observations being in the lower end of its range.\nWhen reviewing the statistics of the continuous variables, it become apparent how great the variation is in each variable, The column “Number of Deaths” has a mean of 3744.12621 and a high standard deviation of 28670.502. The column “Age-Adjusted Death Rates” has a mean of 60.47208 and a standard deviation of 129.967. With such a high standard deviation, it is suggested that both variables have a greater spread of data"
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html#muse",
    "href": "presentation-exercise/presentation-exercise.html#muse",
    "title": "Presentation Exercise",
    "section": "Muse",
    "text": "Muse\nThe following image is the reference I will be attempting to recreate. The graphic describes the effect of Friday the 13th on birth rates across the US from 1194-2014. The data set was found in the link above but also provided by the Centers for Disease Control and Prevention’s National Center for Health Statistics."
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html#loading-data",
    "href": "presentation-exercise/presentation-exercise.html#loading-data",
    "title": "Presentation Exercise",
    "section": "Loading Data",
    "text": "Loading Data\n\n#Loading the required packages \nlibrary(here)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(stringr)\n\n#Reading the .csv files into the following objects \nUS_Birth_1994_2014&lt;-read.csv(here(\"presentation-exercise\", \"CDC_NHS.csv\"))\n\n\n#Confirming the data is read\nsummary(US_Birth_1994_2014)\n\n      year          month        date_of_month    day_of_week     births     \n Min.   :1994   Min.   : 1.000   Min.   : 1.00   Min.   :1    Min.   : 6443  \n 1st Qu.:1996   1st Qu.: 4.000   1st Qu.: 8.00   1st Qu.:2    1st Qu.: 8844  \n Median :1998   Median : 7.000   Median :16.00   Median :4    Median :11615  \n Mean   :1998   Mean   : 6.524   Mean   :15.73   Mean   :4    Mean   :10877  \n 3rd Qu.:2001   3rd Qu.:10.000   3rd Qu.:23.00   3rd Qu.:6    3rd Qu.:12274  \n Max.   :2003   Max.   :12.000   Max.   :31.00   Max.   :7    Max.   :14540  \n\nstr(US_Birth_1994_2014)\n\n'data.frame':   3652 obs. of  5 variables:\n $ year         : int  1994 1994 1994 1994 1994 1994 1994 1994 1994 1994 ...\n $ month        : int  1 1 1 1 1 1 1 1 1 1 ...\n $ date_of_month: int  1 2 3 4 5 6 7 8 9 10 ...\n $ day_of_week  : int  6 7 1 2 3 4 5 6 7 1 ...\n $ births       : int  8096 7772 10142 11248 11053 11406 11251 8653 7910 10498 ...\n\n#Determining the Column names \ncolnames(US_Birth_1994_2014)\n\n[1] \"year\"          \"month\"         \"date_of_month\" \"day_of_week\"  \n[5] \"births\""
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html#visualization-prompts",
    "href": "presentation-exercise/presentation-exercise.html#visualization-prompts",
    "title": "Presentation Exercise",
    "section": "Visualization + Prompts",
    "text": "Visualization + Prompts\nI initially plotted p1 to assist me in visualizing and helping with the cleaning process. After the 2nd attempt with the cleaned data, I used ChatGPT for certain factors listed below.\nThe link I used to adjust the x-axis:\n\nLink\n\nThe link I used to color match for ggplot: - Link\n\n# My first attempt at creating the bar graph while cleaning the data. I knew the day_of_week was on the x-axis and the the y-axis had some numeric value representing some average in birth number. Plotting this allowed me to see what I was missing. \np1 &lt;- ggplot(average_births_6th_20th, aes(x = day_of_week, y = average_births_6th_20th)) +\n  geom_bar(stat = \"identity\", fill = \"hotpink\") +\n  labs(title = \"The Friday the 13th Effect\")\n\nplot(p1)\n\n\n\n# My second attempt with the newly created Difference object. I can tell I am getting closer, but I want to change the y-axis scale to reflect ppt. I also want to ensure that the full subtitle can be seen, and that the Friday bar is highlighted. \np2 &lt;- ggplot(plot_data, aes(x = day_of_week, y = diff_share_13th)) +\n  geom_bar(stat = \"Identity\", fill = \"hotpink\") +\n  labs(title = \"The Friday the 13th Effect\",\n       subtitle = \"Difference in the share of U.S. births on the 13th of each month from the average of births on the 6th and the 20th, 1994-2014\",\n       x =\"Days of the Week\",\n       y = \"Average Birth Difference\"\n  ) \n\nplot(p2)\n\n\n\n# My third attempt. Using ChatGPT, I adjusted the y-axis and changed the title and subtitle format.This was performed by asking how I can format the titles as if it can be wrapped. I also asked it to change the plot so that the y-axis is scaled by percentage point (ppt)\n\n# Wrap the subtitle text to fit within the plot area\nwrapped_subtitle &lt;- str_wrap(\"Difference in the share of U.S. births on the 13th of each month from the average of births on the 6th and the 20th, 1994-2014\", width = 75)\n\np3 &lt;- ggplot(plot_data, aes(x = day_of_week, y = diff_share_13th)) +\n  geom_bar(stat = \"Identity\", fill = \"hotpink\") +\n  labs(title = \"The Friday the 13th Effect\",\n       subtitle = wrapped_subtitle,\n       x =\"Days of the Week\",\n       y = \"Average Birth Difference\"\n  ) +\n  theme(plot.title = element_text(hjust = 0, size= 20, face= \"bold\"), plot.subtitle = element_text(size = 15))\n\n# Adjust the y-axis scale to display in ppt\np3 + scale_y_continuous(labels = function(x) paste0(x /100))\n\n\n\n# My fourth attempt. \n\n# Add column in data frame called \"alpha\" to reflect alpha value for transparency\nplot_data$alpha &lt;- ifelse(plot_data$day_of_week == \"Fri\", 1, 0.25)  # Set alpha to 1 for Friday, 0.5 for others\n\n# Plot with ggplot. I attempted to use ChatGPT to adjust the x-axis labels but was unable to do so. I found the answer in another website, I mentioned above. I needed to flip the x-axis labels to the top and change the color of the bars. I also used ChatGPT to make the other columns more transparent. This is shown in the alpha column.Alpha value is included for transparency. the axis scales are adjusted, and the background is changed so the grid and plot background matches. The color matching is performed by eye with the link shown above as reference. \n\n#Reintroduced wrapped_subtitle with different width. Moving the xlabels to the top messed with the format a bit\nwrapped_subtitle &lt;- str_wrap(\"Difference in the share of U.S. births on the 13th of each month from the average of births on the 6th and the 20th, 1994-2014\", width = 65)\n\n#Plot with ggplot\np4 &lt;- ggplot(plot_data, aes(x = day_of_week, y = diff_share_13th, fill = \"color\")) +\n  geom_bar(stat = \"identity\", alpha = plot_data$alpha) +\n  scale_fill_manual(values = c(\"color\" = \"magenta2\"), guide = FALSE) +  \n  labs(title = \"The Friday the 13th Effect\",\n       subtitle = wrapped_subtitle,\n       x = \"\",\n       y = \"\") +\n  theme(plot.title = element_text(hjust = 0, size = 20, face = \"bold\"), \n        plot.subtitle = element_text(hjust = 0, size = 15), \n        panel.background = element_rect(fill = \"grey91\"),\n        plot.background = element_rect(fill = \"grey91\"))+\n  scale_y_continuous(labels = function(x) ifelse(x == 0, \"0 ppt\", paste0(x / 100))) + #I also included the \"O ppt\" to replace the value 0 on the plot to match the reference\n  scale_x_discrete(position = \"top\") \n\n#View Plot\nplot(p4)\n\n\n\n# Attempt 5. Added the lines and caption to the plot. Used chatgpt by asking how to include lines. Discovered the geom-segment() and annotate() function.\n\np5 &lt;- ggplot(plot_data, aes(x = day_of_week, y = diff_share_13th, fill = \"color\")) +\n  geom_bar(stat = \"identity\", alpha = plot_data$alpha) +\n  scale_fill_manual(values = c(\"color\" = \"magenta2\"), guide = FALSE) +  \n  labs(title = \"The Friday the 13th Effect\",\n       subtitle = wrapped_subtitle,\n       x = \"\",\n       y = \"\",\n       caption = \"V FIVETHIRTYEIGHT                                                                       SOURCES: CDC/NCHS; SOCIAL SECURITY ADMINISTRATION\")+\n  theme(plot.title = element_text(hjust = 0, size = 20, face = \"bold\"), \n        plot.subtitle = element_text(hjust = 0, size = 15), \n        panel.background = element_rect(fill = \"grey91\"),\n        plot.background = element_rect(fill = \"grey91\")) +\n  scale_y_continuous(labels = function(x) ifelse(x == 0, \"0 ppt\", paste0(x / 100))) + \n  scale_x_discrete(position = \"top\") +\n  annotate(\"segment\", x = Inf, xend = -Inf, y = Inf, yend = Inf, color = \"black\")+\n  geom_segment(aes(x = -Inf, xend = Inf, y = -Inf, yend = -Inf), color = \"black\")+\n  annotate(\"text\", x = -Inf, y = -Inf, hjust = 0, vjust = 0, \n           label = \"Includes Holidays\", \n           size = 4)\n#View Plot\nplot(p5)\n\n\n\n#I'm satisfied with the plot, and proceeds to save it\nggsave(\"my_plot.png\", plot = p5)"
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html#conclusion",
    "href": "presentation-exercise/presentation-exercise.html#conclusion",
    "title": "Presentation Exercise",
    "section": "Conclusion",
    "text": "Conclusion\nThe final Results are shown below. The first image is the reference and second image is the recreated plot. There is a slight difference in results, as I was unable to exclude the holidays data which was performed for the reference.\n\nvs"
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html#cleaning-data",
    "href": "presentation-exercise/presentation-exercise.html#cleaning-data",
    "title": "Presentation Exercise",
    "section": "Cleaning Data",
    "text": "Cleaning Data\nCleaning the data to match the data set identified in the plots shown above. I initially attempted to clean the data without AI assistance. From the reference plot, I was able to tell which variables were being filtered and used; however, I ended up being stuck at the determining the difference.\nI initially had each of the averages calculated with the summary() function, but it resulted in a single value output rather than the vector I required. I used ChatGPT 3.5 for the remainder of the cleaning process. I submitted my code and asked “How do I get the difference of the averages and get a vector?” The result added the group_by() function.\n\nsixth_and_twentieth_day &lt;- US_Birth_1994_2014 %&gt;%\n  filter(date_of_month == \"6\" | date_of_month == \"20\")\n\naverage_births_6th_20th &lt;- sixth_and_twentieth_day %&gt;%\n  group_by(day_of_week) %&gt;%\n  summarize(average_births_6th_20th = mean(births))\n\nthirteeth_day &lt;- US_Birth_1994_2014 %&gt;%\n  filter(date_of_month==\"13\")\n\n# Calculate the share of births on the 13th of each month\nbirths_13th &lt;- thirteeth_day %&gt;%\n  group_by(day_of_week) %&gt;%\n  summarise(births = mean(births))\n\n# I then calculated the difference between the share of births on the 13th day and the average births on the 6th and 20th days for each day of the week. The following lines used ChatGPT 3.5. I initially intended to use mutate() function and the pipe function to run it in one string, but ChatGPT recommended the following. \n\n# Calculate the difference in share of births on the 13th from the average of births on the 6th and 20th\ndiff_share_13th &lt;- births_13th$births - average_births_6th_20th$average_births_6th_20th\n# Creating the data frame with all of the variables and labels for plotting\nplot_data &lt;- data.frame(\n  day_of_week = factor(1:7, labels = c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\")),\n  diff_share_13th = diff_share_13th\n)"
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html#table",
    "href": "presentation-exercise/presentation-exercise.html#table",
    "title": "Presentation Exercise",
    "section": "Table",
    "text": "Table\nThe following show a table of the data after it’s been processed, cleaned, and calculated in the above sections using ChatGPT. The prompts include copying the data cleaning process and asking ChatGPT to make a table with flextable package. Some variations were made afterwards. These values were used in the plots.\n\nlibrary(flextable)\n\n# Suppose you want to remove the 'diff_share_13th' variable from the plot_data data frame\nplot_data &lt;- plot_data[, !(names(plot_data) %in% \"alpha\")]\n\n# Suppose you want to change the column names of plot_data to \"Day\" and \"Difference\"\nnames(plot_data) &lt;- c(\"Day of the Week\", \"Difference in Birth Numbers\")\n\n# Create the flextable object\nflex_table &lt;- flextable(plot_data)\n\n# Add some styling if needed\nflex_table &lt;- flex_table %&gt;%\n  align(align = \"center\", part = \"all\") %&gt;%\n  set_table_properties(width = .6)\n\n# Print the table\nflex_table\n\n\nDay of the WeekDifference in Birth NumbersMon-315.17647Tue-173.59375Wed-404.50000Thu-372.92105Fri-832.84375Sat-63.80556Sun-23.05882\n\n\nThe above table was created from the following data set shown below in the tables. These tables were created by selecting the columns in the data set that had date_of_month = “13”, “6”, and “20”. The data was then summarized individually in 13th and together in 6th and 20th by the day_of_week variable and the mean of the birth numbers. This was all performed in the Data Cleaning section.\n\n# Suppose you want to change the column names of plot_data to \"Day\" and \"Difference\"\nnames(average_births_6th_20th) &lt;- c(\"Day of the Week\", \"Difference in Birth Numbers\")\n\n# Create the flextable object\ntable1 &lt;- flextable(average_births_6th_20th)\n\n# Add some styling if needed\ntable1 &lt;- table1 %&gt;%\n  align(align = \"center\", part = \"all\") %&gt;%\n  set_table_properties(width = .6)\n\n# Print the table\ntable1\n\n\nDay of the WeekDifference in Birth Numbers111,127.647212,342.031312,296.441412,235.816512,237.65668,731.75077,853.588\n\n# Suppose you want to change the column names of plot_data to \"Day\" and \"Difference\"\nnames(births_13th) &lt;- c(\"Day of the Week\", \"Difference in Birth Numbers\")\n\n# Create the flextable object\ntable2 &lt;- flextable(births_13th)\n\n# Add some styling if needed\ntable2 &lt;- table2 %&gt;%\n  align(align = \"center\", part = \"all\") %&gt;%\n  set_table_properties(width = .6)\n\n# Print the table\ntable2\n\n\nDay of the WeekDifference in Birth Numbers110,812.471212,168.438311,891.941411,862.895511,404.81268,667.94477,830.529"
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html",
    "href": "fitting-exercise/fitting-exercise.html",
    "title": "Fitting Exercise",
    "section": "",
    "text": "The following exercise uses tidymodel framework to practice model fitting on data provied from:\nLink\n\n\n\n#loading the packages needed for this exercise\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(here)\nlibrary(kableExtra)\nlibrary(tidymodels)\nlibrary(carat)\nlibrary(pROC)\n\n\n#Reading the data into RStudio\ndata &lt;- read.csv(here(\"./fitting-exercise/Mavoglurant_A2121_nmpk.csv\"))\n\n#Reviewing the data with summary() and str()\nsummary(data)\n\n       ID             CMT             EVID              EVI2       \n Min.   :793.0   Min.   :1.000   Min.   :0.00000   Min.   :0.0000  \n 1st Qu.:832.0   1st Qu.:2.000   1st Qu.:0.00000   1st Qu.:0.0000  \n Median :860.0   Median :2.000   Median :0.00000   Median :0.0000  \n Mean   :858.8   Mean   :1.926   Mean   :0.07394   Mean   :0.1613  \n 3rd Qu.:888.0   3rd Qu.:2.000   3rd Qu.:0.00000   3rd Qu.:0.0000  \n Max.   :915.0   Max.   :2.000   Max.   :1.00000   Max.   :4.0000  \n      MDV                DV               LNDV            AMT        \n Min.   :0.00000   Min.   :   0.00   Min.   :0.000   Min.   : 0.000  \n 1st Qu.:0.00000   1st Qu.:  23.52   1st Qu.:3.158   1st Qu.: 0.000  \n Median :0.00000   Median :  74.20   Median :4.306   Median : 0.000  \n Mean   :0.09373   Mean   : 179.93   Mean   :4.085   Mean   : 2.763  \n 3rd Qu.:0.00000   3rd Qu.: 283.00   3rd Qu.:5.645   3rd Qu.: 0.000  \n Max.   :1.00000   Max.   :1730.00   Max.   :7.456   Max.   :50.000  \n      TIME             DOSE            OCC             RATE       \n Min.   : 0.000   Min.   :25.00   Min.   :1.000   Min.   :  0.00  \n 1st Qu.: 0.583   1st Qu.:25.00   1st Qu.:1.000   1st Qu.:  0.00  \n Median : 2.250   Median :37.50   Median :1.000   Median :  0.00  \n Mean   : 5.851   Mean   :37.37   Mean   :1.378   Mean   : 16.55  \n 3rd Qu.: 6.363   3rd Qu.:50.00   3rd Qu.:2.000   3rd Qu.:  0.00  \n Max.   :48.217   Max.   :50.00   Max.   :2.000   Max.   :300.00  \n      AGE            SEX             RACE              WT        \n Min.   :18.0   Min.   :1.000   Min.   : 1.000   Min.   : 56.60  \n 1st Qu.:26.0   1st Qu.:1.000   1st Qu.: 1.000   1st Qu.: 73.30  \n Median :31.0   Median :1.000   Median : 1.000   Median : 82.60  \n Mean   :32.9   Mean   :1.128   Mean   : 7.415   Mean   : 83.16  \n 3rd Qu.:40.0   3rd Qu.:1.000   3rd Qu.: 2.000   3rd Qu.: 90.60  \n Max.   :50.0   Max.   :2.000   Max.   :88.000   Max.   :115.30  \n       HT       \n Min.   :1.520  \n 1st Qu.:1.710  \n Median :1.780  \n Mean   :1.762  \n 3rd Qu.:1.820  \n Max.   :1.930  \n\nstr(data)\n\n'data.frame':   2678 obs. of  17 variables:\n $ ID  : int  793 793 793 793 793 793 793 793 793 793 ...\n $ CMT : int  1 2 2 2 2 2 2 2 2 2 ...\n $ EVID: int  1 0 0 0 0 0 0 0 0 0 ...\n $ EVI2: int  1 0 0 0 0 0 0 0 0 0 ...\n $ MDV : int  1 0 0 0 0 0 0 0 0 0 ...\n $ DV  : num  0 491 605 556 310 237 147 101 72.4 52.6 ...\n $ LNDV: num  0 6.2 6.41 6.32 5.74 ...\n $ AMT : num  25 0 0 0 0 0 0 0 0 0 ...\n $ TIME: num  0 0.2 0.25 0.367 0.533 0.7 1.2 2.2 3.2 4.2 ...\n $ DOSE: num  25 25 25 25 25 25 25 25 25 25 ...\n $ OCC : int  1 1 1 1 1 1 1 1 1 1 ...\n $ RATE: int  75 0 0 0 0 0 0 0 0 0 ...\n $ AGE : int  42 42 42 42 42 42 42 42 42 42 ...\n $ SEX : int  1 1 1 1 1 1 1 1 1 1 ...\n $ RACE: int  2 2 2 2 2 2 2 2 2 2 ...\n $ WT  : num  94.3 94.3 94.3 94.3 94.3 94.3 94.3 94.3 94.3 94.3 ...\n $ HT  : num  1.77 1.77 1.77 1.77 1.77 ...\n\n\n\n\n\nThe data was cleaned and filtered. I adjusted the column type of the DOSE variable to a factor for clarity and removed entries where OCC is equal to 2. Additionally, I filtered out observations with TIME equal to 0.\nData visualization and exploration are essential for understanding the underlying structure and patterns within a dataset. I examined the frequency distribution of variables, allowing me to gain insights into their central tendencies, spread, and potential outliers. These visualizations help identify relationships between variables, detect anomalies, and assess the quality of the data, ultimately informing subsequent analyses and modeling decisions.\n\n# Adjusting the column to factor for clarity when plotted\ndata$DOSE &lt;- as.factor(data$DOSE)\n\n# Plotted DV vs Time, stratified by dose\nggplot(data, aes(x = TIME, y = DV, color = DOSE)) +\n  geom_line() +\n  labs(x = \"Time\", y = \"DV\", color = \"DOSE\") +\n  theme_minimal()\n\n\n\n\n\n\n\n# Using Facet to show the difference\nggplot(data, aes(x = TIME, y = DV, color = DOSE)) +\n  geom_line() +\n  facet_wrap(~DOSE) +\n  labs(x = \"Time\", y = \"DV\", color = \"Dose\") +\n  theme_minimal()\n\n\n\n\n\n\n\n# Removing entries of OCC=2\ndata &lt;- data %&gt;%\n  filter(OCC !=2)\n\n#Confirming OCC=2 is removed\nsummary(data$OCC)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      1       1       1       1       1       1 \n\n# Filter out any observation of Time=0\ndata_wo_time0 &lt;- data %&gt;%\n  filter(TIME != 0)\nsummary(data_wo_time0) \n\n       ID             CMT         EVID        EVI2        MDV         \n Min.   :793.0   Min.   :2   Min.   :0   Min.   :0   Min.   :0.00000  \n 1st Qu.:818.0   1st Qu.:2   1st Qu.:0   1st Qu.:0   1st Qu.:0.00000  \n Median :849.0   Median :2   Median :0   Median :0   Median :0.00000  \n Mean   :850.8   Mean   :2   Mean   :0   Mean   :0   Mean   :0.03301  \n 3rd Qu.:882.0   3rd Qu.:2   3rd Qu.:0   3rd Qu.:0   3rd Qu.:0.00000  \n Max.   :915.0   Max.   :2   Max.   :0   Max.   :0   Max.   :1.00000  \n       DV              LNDV            AMT         TIME          DOSE    \n Min.   :   0.0   Min.   :0.000   Min.   :0   Min.   : 0.200   25  :744  \n 1st Qu.:  28.4   1st Qu.:3.346   1st Qu.:0   1st Qu.: 0.583   37.5:177  \n Median :  85.2   Median :4.445   Median :0   Median : 3.200   50  :624  \n Mean   : 189.9   Mean   :4.335   Mean   :0   Mean   : 6.930             \n 3rd Qu.: 302.0   3rd Qu.:5.710   3rd Qu.:0   3rd Qu.: 8.250             \n Max.   :1550.0   Max.   :7.346   Max.   :0   Max.   :48.217             \n      OCC         RATE        AGE             SEX             RACE       \n Min.   :1   Min.   :0   Min.   :18.00   Min.   :1.000   Min.   : 1.000  \n 1st Qu.:1   1st Qu.:0   1st Qu.:26.00   1st Qu.:1.000   1st Qu.: 1.000  \n Median :1   Median :0   Median :31.00   Median :1.000   Median : 1.000  \n Mean   :1   Mean   :0   Mean   :33.12   Mean   :1.136   Mean   : 6.968  \n 3rd Qu.:1   3rd Qu.:0   3rd Qu.:41.00   3rd Qu.:1.000   3rd Qu.: 2.000  \n Max.   :1   Max.   :0   Max.   :50.00   Max.   :2.000   Max.   :88.000  \n       WT               HT       \n Min.   : 56.60   Min.   :1.520  \n 1st Qu.: 73.10   1st Qu.:1.700  \n Median : 82.10   Median :1.770  \n Mean   : 82.35   Mean   :1.757  \n 3rd Qu.: 90.10   3rd Qu.:1.810  \n Max.   :115.30   Max.   :1.930  \n\n# Summarization of DV Variable (observed value)\nsummarized_data &lt;- data_wo_time0 %&gt;%\n  group_by(ID) %&gt;%\n  summarize(Y = sum(DV))\nsummary(summarized_data) # Frame with 120x2\n\n       ID              Y         \n Min.   :793.0   Min.   : 826.4  \n 1st Qu.:822.8   1st Qu.:1700.5  \n Median :853.5   Median :2349.1  \n Mean   :853.7   Mean   :2445.4  \n 3rd Qu.:884.2   3rd Qu.:3050.2  \n Max.   :915.0   Max.   :5606.6  \n\n# Creating Data Frame where Time==0\nTime0_df &lt;- data %&gt;%\n  filter(TIME == 0)\nsummary(Time0_df) # Frame with 120 x 17\n\n       ID             CMT         EVID        EVI2        MDV          DV   \n Min.   :793.0   Min.   :1   Min.   :1   Min.   :1   Min.   :1   Min.   :0  \n 1st Qu.:822.8   1st Qu.:1   1st Qu.:1   1st Qu.:1   1st Qu.:1   1st Qu.:0  \n Median :853.5   Median :1   Median :1   Median :1   Median :1   Median :0  \n Mean   :853.7   Mean   :1   Mean   :1   Mean   :1   Mean   :1   Mean   :0  \n 3rd Qu.:884.2   3rd Qu.:1   3rd Qu.:1   3rd Qu.:1   3rd Qu.:1   3rd Qu.:0  \n Max.   :915.0   Max.   :1   Max.   :1   Max.   :1   Max.   :1   Max.   :0  \n      LNDV        AMT             TIME     DOSE         OCC         RATE      \n Min.   :0   Min.   :25.00   Min.   :0   25  :59   Min.   :1   Min.   : 75.0  \n 1st Qu.:0   1st Qu.:25.00   1st Qu.:0   37.5:12   1st Qu.:1   1st Qu.:150.0  \n Median :0   Median :37.50   Median :0   50  :49   Median :1   Median :225.0  \n Mean   :0   Mean   :36.46   Mean   :0             Mean   :1   Mean   :218.1  \n 3rd Qu.:0   3rd Qu.:50.00   3rd Qu.:0             3rd Qu.:1   3rd Qu.:300.0  \n Max.   :0   Max.   :50.00   Max.   :0             Max.   :1   Max.   :300.0  \n      AGE             SEX             RACE            WT        \n Min.   :18.00   Min.   :1.000   Min.   : 1.0   Min.   : 56.60  \n 1st Qu.:26.00   1st Qu.:1.000   1st Qu.: 1.0   1st Qu.: 73.17  \n Median :31.00   Median :1.000   Median : 1.0   Median : 82.10  \n Mean   :33.00   Mean   :1.133   Mean   : 7.2   Mean   : 82.55  \n 3rd Qu.:40.25   3rd Qu.:1.000   3rd Qu.: 2.0   3rd Qu.: 90.10  \n Max.   :50.00   Max.   :2.000   Max.   :88.0   Max.   :115.30  \n       HT       \n Min.   :1.520  \n 1st Qu.:1.700  \n Median :1.770  \n Mean   :1.759  \n 3rd Qu.:1.813  \n Max.   :1.930  \n\n# Combining the two data frames with join function\ncombined_data &lt;- left_join(summarized_data, Time0_df, by = \"ID\")\ncombined_data # Frame with 120 x 18\n\n# A tibble: 120 × 18\n      ID     Y   CMT  EVID  EVI2   MDV    DV  LNDV   AMT  TIME DOSE    OCC  RATE\n   &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt;\n 1   793 2691.     1     1     1     1     0     0    25     0 25        1    75\n 2   794 2639.     1     1     1     1     0     0    25     0 25        1   150\n 3   795 2150.     1     1     1     1     0     0    25     0 25        1   150\n 4   796 1789.     1     1     1     1     0     0    25     0 25        1   150\n 5   797 3126.     1     1     1     1     0     0    25     0 25        1   150\n 6   798 2337.     1     1     1     1     0     0    25     0 25        1   150\n 7   799 3007.     1     1     1     1     0     0    25     0 25        1   150\n 8   800 2796.     1     1     1     1     0     0    25     0 25        1   150\n 9   801 3866.     1     1     1     1     0     0    25     0 25        1   150\n10   802 1762.     1     1     1     1     0     0    25     0 25        1   150\n# ℹ 110 more rows\n# ℹ 5 more variables: AGE &lt;int&gt;, SEX &lt;int&gt;, RACE &lt;int&gt;, WT &lt;dbl&gt;, HT &lt;dbl&gt;\n\ncombined_data &lt;- combined_data %&gt;%\n  mutate(RACE = factor(RACE),\n         SEX = factor(SEX)) %&gt;%\n  select(Y, DOSE, AGE, SEX, RACE, WT, HT)\n\n\n\n\nI summarized the DV variable, created summary statistics, and visualized the distribution of various variables using histograms and bar plots.\nWithout a codebook, many of the graphs produce remain unclear on what type of information it is presenting. However, we can discern from the sex plot, there is an overwhelming response from one race over the other. As for the scatterplots, we can tell there’s a slight negative relationship between the numeric predictors and Y. The higher the dosage, the greater the Y value. As ther was no codebook, we’re unable to clearly determine what the summation of DV reflects, but we can assume it is some observed value that’s related to the dosage of a product.\n\n# Producing a summary statistics of variable Y\nsummary_stats &lt;- combined_data %&gt;%\n  group_by(DOSE) %&gt;%\n  summarise(\n    Mean_Y = mean(Y),\n    Median_Y = median(Y),\n    Min_Y = min(Y),\n    Max_Y = max(Y),\n    SD_Y = sd(Y)\n  )\nsummary_stats\n\n# A tibble: 3 × 6\n  DOSE  Mean_Y Median_Y Min_Y Max_Y  SD_Y\n  &lt;fct&gt;  &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 25     1783.    1666.  826. 3866.  601.\n2 37.5   2464.    2388. 1801. 3463.  488.\n3 50     3239.    3194. 1949. 5607.  787.\n\n# Creating a table of the dataframe with kable package\nsummary_stats %&gt;%\n  kable() %&gt;%\n  kable_styling(full_width = FALSE) %&gt;%\n  add_header_above(c(\" \" = 1, \"Y Summary Statistics\" = 5))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nY Summary Statistics\n\n\n\nDOSE\nMean_Y\nMedian_Y\nMin_Y\nMax_Y\nSD_Y\n\n\n\n\n25\n1782.669\n1666.100\n826.43\n3865.79\n600.9420\n\n\n37.5\n2463.913\n2388.335\n1800.79\n3462.59\n488.4981\n\n\n50\n3238.866\n3193.980\n1948.80\n5606.58\n786.6904\n\n\n\n\n\n\nkable(summary_stats)\n\n\n\n\nDOSE\nMean_Y\nMedian_Y\nMin_Y\nMax_Y\nSD_Y\n\n\n\n\n25\n1782.669\n1666.100\n826.43\n3865.79\n600.9420\n\n\n37.5\n2463.913\n2388.335\n1800.79\n3462.59\n488.4981\n\n\n50\n3238.866\n3193.980\n1948.80\n5606.58\n786.6904\n\n\n\n\n\n\n# Plotting Y to show Frequency Distribution\nggplot(combined_data, aes(x = Y)) +\n  geom_histogram(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Y\", y = \"Frequency\") +\n  theme_minimal()\n\n\n\n\n\n\n\n# Plotting Age to show Frequency Distribution\nggplot(combined_data, aes(x=AGE))+\n  geom_histogram(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Age\", y = \"Frequency\") +\n  theme_minimal()\n\n\n\n\n\n\n\n# Plotting Weight to show Frequency Distribution\nggplot(combined_data, aes(x=WT))+\n  geom_histogram(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Weight\", y = \"Frequency\") +\n  theme_minimal()\n\n\n\n\n\n\n\n# Plotting Height to show Frequency Distribution\nggplot(combined_data, aes(x=HT))+\n  geom_histogram(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Height\", y = \"Frequency\") +\n  theme_minimal()\n\n\n\n\n\n\n\n# Determining the distribution of the Dose factorand plotting it as a bar graph\ntable(combined_data$DOSE)\n\n\n  25 37.5   50 \n  59   12   49 \n\nggplot(combined_data, aes(x=DOSE, fill=DOSE))+\n  labs(x = \"Dose\", y = \"Frequency\")+\n  geom_bar()\n\n\n\n\n\n\n\n# Determining the distribution of the Sex factor and plotting it as a bar graph\ntable(combined_data$SEX)\n\n\n  1   2 \n104  16 \n\nggplot(combined_data, aes(x=SEX, fill=SEX))+ \n  labs(x = \"Sex\", y = \"Frequency\")+\n  geom_bar()\n\n\n\n\n\n\n\n#Determining the distribution of the RACE variable and plotting it as a bar graph\ntable(combined_data$RACE)\n\n\n 1  2  7 88 \n74 36  2  8 \n\nggplot(combined_data, aes(x=RACE, fill=RACE))+ \n  labs(x = \"Race\",  y = \"Frequency\")+\n  geom_bar()\n\n\n\n\n\n\n\n\nScatterplots and boxplots were created to visualize relationships between variables and explore distributions.\n\n# Scatterplot of Y vs other numerical predictors\nggplot(combined_data, aes(x = AGE, y = Y)) +\n  geom_point()+\n  geom_smooth(method = \"lm\")+\n  labs(X = \"Age\", y = \"Sum of DV\")\n\n\n\n\n\n\n\n# Y Vs Weight\nggplot(combined_data, aes(x = WT, y = Y, color=DOSE)) +\n  geom_point()+\n  geom_smooth(method = \"lm\")+\n  labs(X = \"Weight\", y = \"Sum of DV\")\n\n\n\n\n\n\n\n# Y Vs Height\nggplot(combined_data, aes(x = HT, y = Y, color = DOSE)) +\n  geom_point()+\n  geom_smooth(method = \"lm\")+\n  labs(X = \"Height\", y = \"Sum of DV\")\n\n\n\n\n\n\n\n# Boxplot of Y by SEX\nggplot(combined_data, aes(x = SEX, y = Y)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n# Boxplot of Y by RACE\nggplot(combined_data, aes(x = RACE, y = Y)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n# Boxplot of Y by DOSE\nggplot(combined_data, aes(x = DOSE, y = Y)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n# Pair/Correlation plots of the numerical variables\n# Pair plot of selected variables\npairplot &lt;- pairs(combined_data[, c(\"Y\", \"AGE\", \"WT\", \"HT\")])\n\n\n\n\n\n\n\n# Correlation matrix\ncorrelation_matrix &lt;- cor(combined_data[, c(\"Y\", \"AGE\", \"WT\", \"HT\")])\n\n\n\n\nI built linear regression models using tidymodels with DOSE as the main predictor and with all predictors. I also fit logistic regression models to predict SEX using DOSE as the main predictor and using all predictors.\nRMSD and R-squared Calculation: I manually calculated RMSD and R-squared values for the linear regression models using tidymodels. I evaluated the performance of the logistic regression models by computing accuracy and ROC-AUC.\n\n# Creating a Linear Regression model specification\nlm_spec &lt;- linear_reg() %&gt;%\n  set_engine(\"lm\") %&gt;%\n  set_mode(\"regression\")\n\n# Fitting a linear model to the continuous outcome (Y) and DOSE\nlm_fit &lt;- lm_spec %&gt;%\n  fit(Y ~ DOSE, combined_data)\n\n# Sharing the result and summary of the fit\nsummary(lm_fit$fit)\n\n\nCall:\nstats::lm(formula = Y ~ DOSE, data = data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1290.1  -445.6   -90.9   352.2  2367.7 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  1782.67      87.85  20.292  &lt; 2e-16 ***\nDOSE37.5      681.24     213.69   3.188  0.00184 ** \nDOSE50       1456.20     130.43  11.165  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 674.8 on 117 degrees of freedom\nMultiple R-squared:  0.5159,    Adjusted R-squared:  0.5076 \nF-statistic: 62.33 on 2 and 117 DF,  p-value: &lt; 2.2e-16\n\n# Fit linear model using all predictors\nfull_linear_model &lt;- lm_spec %&gt;%\n  fit(Y ~ ., combined_data)\n\n# Print summary of the linear model\nsummary(full_linear_model$fit)\n\n\nCall:\nstats::lm(formula = Y ~ ., data = data)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1496.97  -362.81   -71.26   285.84  2421.48 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 4890.923   1822.710   2.683 0.008415 ** \nDOSE37.5     663.683    200.448   3.311 0.001258 ** \nDOSE50      1499.048    122.462  12.241  &lt; 2e-16 ***\nAGE            3.521      7.895   0.446 0.656517    \nSEX2        -360.048    217.775  -1.653 0.101121    \nRACE2        148.883    129.821   1.147 0.253936    \nRACE7       -420.950    451.163  -0.933 0.352846    \nRACE88       -65.300    246.961  -0.264 0.791954    \nWT           -23.281      6.440  -3.615 0.000454 ***\nHT          -741.050   1108.100  -0.669 0.505051    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 616.6 on 110 degrees of freedom\nMultiple R-squared:   0.62, Adjusted R-squared:  0.5889 \nF-statistic: 19.94 on 9 and 110 DF,  p-value: &lt; 2.2e-16\n\n# For the model with DOSE as the predictor\ndose_predictions &lt;- predict(lm_fit$fit)\ndose_rmsd &lt;- sqrt(mean((combined_data$Y - dose_predictions)^2))\n\n# For the model with all predictors\nfull_predictions &lt;- predict(full_linear_model$fit)\nfull_rmsd &lt;- sqrt(mean((combined_data$Y - full_predictions)^2))\n\n# For the model with DOSE as the predictor\ndose_r_squared &lt;- summary(lm_fit$fit)$r.squared\n\n# For the model with all predictors\nfull_r_squared &lt;- summary(full_linear_model$fit)$r.squared\n\n#Printing R squared value and RMSD\nprint(dose_rmsd)\n\n[1] 666.3137\n\nprint(full_r_squared)\n\n[1] 0.6200016\n\nprint(dose_r_squared)\n\n[1] 0.5158598\n\nprint(full_rmsd)\n\n[1] 590.3153\n\n# Fit a logistic model using the main predictor (DOSE)\nlogistic_dose &lt;- glm(SEX ~ DOSE, data = combined_data, family = binomial)\nsummary(logistic_dose)\n\n\nCall:\nglm(formula = SEX ~ DOSE, family = binomial, data = combined_data)\n\nCoefficients:\n            Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept)  -1.5892     0.3470  -4.580 4.65e-06 ***\nDOSE37.5     -0.0202     0.8488  -0.024    0.981    \nDOSE50       -0.8311     0.6266  -1.326    0.185    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 94.242  on 119  degrees of freedom\nResidual deviance: 92.221  on 117  degrees of freedom\nAIC: 98.221\n\nNumber of Fisher Scoring iterations: 5\n\n# Fit a logistic model using all predictors\nlogit_all &lt;- glm(SEX ~ ., data = combined_data, family = binomial)\nsummary(logit_all)\n\n\nCall:\nglm(formula = SEX ~ ., family = binomial, data = combined_data)\n\nCoefficients:\n              Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept)  5.914e+01  1.760e+01   3.360 0.000779 ***\nY           -1.113e-03  9.585e-04  -1.162 0.245397    \nDOSE37.5    -2.511e+00  2.041e+00  -1.230 0.218609    \nDOSE50      -6.176e-01  1.909e+00  -0.324 0.746303    \nAGE          1.128e-01  6.876e-02   1.640 0.100904    \nRACE2       -2.271e+00  1.480e+00  -1.535 0.124841    \nRACE7       -4.429e-01  4.335e+00  -0.102 0.918640    \nRACE88      -2.020e+00  2.428e+00  -0.832 0.405545    \nWT          -9.234e-02  7.992e-02  -1.155 0.247924    \nHT          -3.199e+01  1.040e+01  -3.076 0.002097 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 94.242  on 119  degrees of freedom\nResidual deviance: 30.518  on 110  degrees of freedom\nAIC: 50.518\n\nNumber of Fisher Scoring iterations: 8\n\n# Predictions for the model using the main predictor (DOSE)\ny_pred_main &lt;- ifelse(predict(logistic_dose, newdata = combined_data, type = \"response\") &gt; 0.5, 1, 0)\n\n# Predictions for the model using all predictors\ny_pred_all &lt;- ifelse(predict(logit_all, newdata = combined_data, type = \"response\") &gt; 0.5, 1, 0)\n\n# True labels from the test data\ny_true &lt;- combined_data$SEX\n\n# Compute accuracy\naccuracy_main &lt;- mean(y_pred_main == y_true)\naccuracy_all &lt;- mean(y_pred_all == y_true)\nprint(accuracy_main)\n\n[1] 0\n\nprint(accuracy_all)\n\n[1] 0.01666667\n\n# Compute ROC-AUC\nroc_auc_main &lt;- roc(y_true, predict(logistic_dose, newdata = combined_data, type = \"response\"))$auc\nroc_auc_all &lt;- roc(y_true, predict(logit_all, newdata = combined_data, type = \"response\"))$auc\nprint(roc_auc_main)\n\nArea under the curve: 0.5919\n\nprint( roc_auc_all)\n\nArea under the curve: 0.9832"
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#loading-data",
    "href": "fitting-exercise/fitting-exercise.html#loading-data",
    "title": "Fitting Exercise",
    "section": "",
    "text": "#loading the packages needed for this exercise\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(here)\nlibrary(kableExtra)\nlibrary(tidymodels)\nlibrary(carat)\nlibrary(pROC)\n\n\n#Reading the data into RStudio\ndata &lt;- read.csv(here(\"./fitting-exercise/Mavoglurant_A2121_nmpk.csv\"))\n\n#Reviewing the data with summary() and str()\nsummary(data)\n\n       ID             CMT             EVID              EVI2       \n Min.   :793.0   Min.   :1.000   Min.   :0.00000   Min.   :0.0000  \n 1st Qu.:832.0   1st Qu.:2.000   1st Qu.:0.00000   1st Qu.:0.0000  \n Median :860.0   Median :2.000   Median :0.00000   Median :0.0000  \n Mean   :858.8   Mean   :1.926   Mean   :0.07394   Mean   :0.1613  \n 3rd Qu.:888.0   3rd Qu.:2.000   3rd Qu.:0.00000   3rd Qu.:0.0000  \n Max.   :915.0   Max.   :2.000   Max.   :1.00000   Max.   :4.0000  \n      MDV                DV               LNDV            AMT        \n Min.   :0.00000   Min.   :   0.00   Min.   :0.000   Min.   : 0.000  \n 1st Qu.:0.00000   1st Qu.:  23.52   1st Qu.:3.158   1st Qu.: 0.000  \n Median :0.00000   Median :  74.20   Median :4.306   Median : 0.000  \n Mean   :0.09373   Mean   : 179.93   Mean   :4.085   Mean   : 2.763  \n 3rd Qu.:0.00000   3rd Qu.: 283.00   3rd Qu.:5.645   3rd Qu.: 0.000  \n Max.   :1.00000   Max.   :1730.00   Max.   :7.456   Max.   :50.000  \n      TIME             DOSE            OCC             RATE       \n Min.   : 0.000   Min.   :25.00   Min.   :1.000   Min.   :  0.00  \n 1st Qu.: 0.583   1st Qu.:25.00   1st Qu.:1.000   1st Qu.:  0.00  \n Median : 2.250   Median :37.50   Median :1.000   Median :  0.00  \n Mean   : 5.851   Mean   :37.37   Mean   :1.378   Mean   : 16.55  \n 3rd Qu.: 6.363   3rd Qu.:50.00   3rd Qu.:2.000   3rd Qu.:  0.00  \n Max.   :48.217   Max.   :50.00   Max.   :2.000   Max.   :300.00  \n      AGE            SEX             RACE              WT        \n Min.   :18.0   Min.   :1.000   Min.   : 1.000   Min.   : 56.60  \n 1st Qu.:26.0   1st Qu.:1.000   1st Qu.: 1.000   1st Qu.: 73.30  \n Median :31.0   Median :1.000   Median : 1.000   Median : 82.60  \n Mean   :32.9   Mean   :1.128   Mean   : 7.415   Mean   : 83.16  \n 3rd Qu.:40.0   3rd Qu.:1.000   3rd Qu.: 2.000   3rd Qu.: 90.60  \n Max.   :50.0   Max.   :2.000   Max.   :88.000   Max.   :115.30  \n       HT       \n Min.   :1.520  \n 1st Qu.:1.710  \n Median :1.780  \n Mean   :1.762  \n 3rd Qu.:1.820  \n Max.   :1.930  \n\nstr(data)\n\n'data.frame':   2678 obs. of  17 variables:\n $ ID  : int  793 793 793 793 793 793 793 793 793 793 ...\n $ CMT : int  1 2 2 2 2 2 2 2 2 2 ...\n $ EVID: int  1 0 0 0 0 0 0 0 0 0 ...\n $ EVI2: int  1 0 0 0 0 0 0 0 0 0 ...\n $ MDV : int  1 0 0 0 0 0 0 0 0 0 ...\n $ DV  : num  0 491 605 556 310 237 147 101 72.4 52.6 ...\n $ LNDV: num  0 6.2 6.41 6.32 5.74 ...\n $ AMT : num  25 0 0 0 0 0 0 0 0 0 ...\n $ TIME: num  0 0.2 0.25 0.367 0.533 0.7 1.2 2.2 3.2 4.2 ...\n $ DOSE: num  25 25 25 25 25 25 25 25 25 25 ...\n $ OCC : int  1 1 1 1 1 1 1 1 1 1 ...\n $ RATE: int  75 0 0 0 0 0 0 0 0 0 ...\n $ AGE : int  42 42 42 42 42 42 42 42 42 42 ...\n $ SEX : int  1 1 1 1 1 1 1 1 1 1 ...\n $ RACE: int  2 2 2 2 2 2 2 2 2 2 ...\n $ WT  : num  94.3 94.3 94.3 94.3 94.3 94.3 94.3 94.3 94.3 94.3 ...\n $ HT  : num  1.77 1.77 1.77 1.77 1.77 ..."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#data-processing-and-exploration",
    "href": "fitting-exercise/fitting-exercise.html#data-processing-and-exploration",
    "title": "Fitting Exercise",
    "section": "",
    "text": "The data was cleaned and filtered. I adjusted the column type of the DOSE variable to a factor for clarity and removed entries where OCC is equal to 2. Additionally, I filtered out observations with TIME equal to 0.\nData visualization and exploration are essential for understanding the underlying structure and patterns within a dataset. I examined the frequency distribution of variables, allowing me to gain insights into their central tendencies, spread, and potential outliers. These visualizations help identify relationships between variables, detect anomalies, and assess the quality of the data, ultimately informing subsequent analyses and modeling decisions.\n\n# Adjusting the column to factor for clarity when plotted\ndata$DOSE &lt;- as.factor(data$DOSE)\n\n# Plotted DV vs Time, stratified by dose\nggplot(data, aes(x = TIME, y = DV, color = DOSE)) +\n  geom_line() +\n  labs(x = \"Time\", y = \"DV\", color = \"DOSE\") +\n  theme_minimal()\n\n\n\n\n\n\n\n# Using Facet to show the difference\nggplot(data, aes(x = TIME, y = DV, color = DOSE)) +\n  geom_line() +\n  facet_wrap(~DOSE) +\n  labs(x = \"Time\", y = \"DV\", color = \"Dose\") +\n  theme_minimal()\n\n\n\n\n\n\n\n# Removing entries of OCC=2\ndata &lt;- data %&gt;%\n  filter(OCC !=2)\n\n#Confirming OCC=2 is removed\nsummary(data$OCC)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      1       1       1       1       1       1 \n\n# Filter out any observation of Time=0\ndata_wo_time0 &lt;- data %&gt;%\n  filter(TIME != 0)\nsummary(data_wo_time0) \n\n       ID             CMT         EVID        EVI2        MDV         \n Min.   :793.0   Min.   :2   Min.   :0   Min.   :0   Min.   :0.00000  \n 1st Qu.:818.0   1st Qu.:2   1st Qu.:0   1st Qu.:0   1st Qu.:0.00000  \n Median :849.0   Median :2   Median :0   Median :0   Median :0.00000  \n Mean   :850.8   Mean   :2   Mean   :0   Mean   :0   Mean   :0.03301  \n 3rd Qu.:882.0   3rd Qu.:2   3rd Qu.:0   3rd Qu.:0   3rd Qu.:0.00000  \n Max.   :915.0   Max.   :2   Max.   :0   Max.   :0   Max.   :1.00000  \n       DV              LNDV            AMT         TIME          DOSE    \n Min.   :   0.0   Min.   :0.000   Min.   :0   Min.   : 0.200   25  :744  \n 1st Qu.:  28.4   1st Qu.:3.346   1st Qu.:0   1st Qu.: 0.583   37.5:177  \n Median :  85.2   Median :4.445   Median :0   Median : 3.200   50  :624  \n Mean   : 189.9   Mean   :4.335   Mean   :0   Mean   : 6.930             \n 3rd Qu.: 302.0   3rd Qu.:5.710   3rd Qu.:0   3rd Qu.: 8.250             \n Max.   :1550.0   Max.   :7.346   Max.   :0   Max.   :48.217             \n      OCC         RATE        AGE             SEX             RACE       \n Min.   :1   Min.   :0   Min.   :18.00   Min.   :1.000   Min.   : 1.000  \n 1st Qu.:1   1st Qu.:0   1st Qu.:26.00   1st Qu.:1.000   1st Qu.: 1.000  \n Median :1   Median :0   Median :31.00   Median :1.000   Median : 1.000  \n Mean   :1   Mean   :0   Mean   :33.12   Mean   :1.136   Mean   : 6.968  \n 3rd Qu.:1   3rd Qu.:0   3rd Qu.:41.00   3rd Qu.:1.000   3rd Qu.: 2.000  \n Max.   :1   Max.   :0   Max.   :50.00   Max.   :2.000   Max.   :88.000  \n       WT               HT       \n Min.   : 56.60   Min.   :1.520  \n 1st Qu.: 73.10   1st Qu.:1.700  \n Median : 82.10   Median :1.770  \n Mean   : 82.35   Mean   :1.757  \n 3rd Qu.: 90.10   3rd Qu.:1.810  \n Max.   :115.30   Max.   :1.930  \n\n# Summarization of DV Variable (observed value)\nsummarized_data &lt;- data_wo_time0 %&gt;%\n  group_by(ID) %&gt;%\n  summarize(Y = sum(DV))\nsummary(summarized_data) # Frame with 120x2\n\n       ID              Y         \n Min.   :793.0   Min.   : 826.4  \n 1st Qu.:822.8   1st Qu.:1700.5  \n Median :853.5   Median :2349.1  \n Mean   :853.7   Mean   :2445.4  \n 3rd Qu.:884.2   3rd Qu.:3050.2  \n Max.   :915.0   Max.   :5606.6  \n\n# Creating Data Frame where Time==0\nTime0_df &lt;- data %&gt;%\n  filter(TIME == 0)\nsummary(Time0_df) # Frame with 120 x 17\n\n       ID             CMT         EVID        EVI2        MDV          DV   \n Min.   :793.0   Min.   :1   Min.   :1   Min.   :1   Min.   :1   Min.   :0  \n 1st Qu.:822.8   1st Qu.:1   1st Qu.:1   1st Qu.:1   1st Qu.:1   1st Qu.:0  \n Median :853.5   Median :1   Median :1   Median :1   Median :1   Median :0  \n Mean   :853.7   Mean   :1   Mean   :1   Mean   :1   Mean   :1   Mean   :0  \n 3rd Qu.:884.2   3rd Qu.:1   3rd Qu.:1   3rd Qu.:1   3rd Qu.:1   3rd Qu.:0  \n Max.   :915.0   Max.   :1   Max.   :1   Max.   :1   Max.   :1   Max.   :0  \n      LNDV        AMT             TIME     DOSE         OCC         RATE      \n Min.   :0   Min.   :25.00   Min.   :0   25  :59   Min.   :1   Min.   : 75.0  \n 1st Qu.:0   1st Qu.:25.00   1st Qu.:0   37.5:12   1st Qu.:1   1st Qu.:150.0  \n Median :0   Median :37.50   Median :0   50  :49   Median :1   Median :225.0  \n Mean   :0   Mean   :36.46   Mean   :0             Mean   :1   Mean   :218.1  \n 3rd Qu.:0   3rd Qu.:50.00   3rd Qu.:0             3rd Qu.:1   3rd Qu.:300.0  \n Max.   :0   Max.   :50.00   Max.   :0             Max.   :1   Max.   :300.0  \n      AGE             SEX             RACE            WT        \n Min.   :18.00   Min.   :1.000   Min.   : 1.0   Min.   : 56.60  \n 1st Qu.:26.00   1st Qu.:1.000   1st Qu.: 1.0   1st Qu.: 73.17  \n Median :31.00   Median :1.000   Median : 1.0   Median : 82.10  \n Mean   :33.00   Mean   :1.133   Mean   : 7.2   Mean   : 82.55  \n 3rd Qu.:40.25   3rd Qu.:1.000   3rd Qu.: 2.0   3rd Qu.: 90.10  \n Max.   :50.00   Max.   :2.000   Max.   :88.0   Max.   :115.30  \n       HT       \n Min.   :1.520  \n 1st Qu.:1.700  \n Median :1.770  \n Mean   :1.759  \n 3rd Qu.:1.813  \n Max.   :1.930  \n\n# Combining the two data frames with join function\ncombined_data &lt;- left_join(summarized_data, Time0_df, by = \"ID\")\ncombined_data # Frame with 120 x 18\n\n# A tibble: 120 × 18\n      ID     Y   CMT  EVID  EVI2   MDV    DV  LNDV   AMT  TIME DOSE    OCC  RATE\n   &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt;\n 1   793 2691.     1     1     1     1     0     0    25     0 25        1    75\n 2   794 2639.     1     1     1     1     0     0    25     0 25        1   150\n 3   795 2150.     1     1     1     1     0     0    25     0 25        1   150\n 4   796 1789.     1     1     1     1     0     0    25     0 25        1   150\n 5   797 3126.     1     1     1     1     0     0    25     0 25        1   150\n 6   798 2337.     1     1     1     1     0     0    25     0 25        1   150\n 7   799 3007.     1     1     1     1     0     0    25     0 25        1   150\n 8   800 2796.     1     1     1     1     0     0    25     0 25        1   150\n 9   801 3866.     1     1     1     1     0     0    25     0 25        1   150\n10   802 1762.     1     1     1     1     0     0    25     0 25        1   150\n# ℹ 110 more rows\n# ℹ 5 more variables: AGE &lt;int&gt;, SEX &lt;int&gt;, RACE &lt;int&gt;, WT &lt;dbl&gt;, HT &lt;dbl&gt;\n\ncombined_data &lt;- combined_data %&gt;%\n  mutate(RACE = factor(RACE),\n         SEX = factor(SEX)) %&gt;%\n  select(Y, DOSE, AGE, SEX, RACE, WT, HT)"
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#eda-revisited",
    "href": "fitting-exercise/fitting-exercise.html#eda-revisited",
    "title": "Fitting Exercise",
    "section": "",
    "text": "I summarized the DV variable, created summary statistics, and visualized the distribution of various variables using histograms and bar plots.\nWithout a codebook, many of the graphs produce remain unclear on what type of information it is presenting. However, we can discern from the sex plot, there is an overwhelming response from one race over the other. As for the scatterplots, we can tell there’s a slight negative relationship between the numeric predictors and Y. The higher the dosage, the greater the Y value. As ther was no codebook, we’re unable to clearly determine what the summation of DV reflects, but we can assume it is some observed value that’s related to the dosage of a product.\n\n# Producing a summary statistics of variable Y\nsummary_stats &lt;- combined_data %&gt;%\n  group_by(DOSE) %&gt;%\n  summarise(\n    Mean_Y = mean(Y),\n    Median_Y = median(Y),\n    Min_Y = min(Y),\n    Max_Y = max(Y),\n    SD_Y = sd(Y)\n  )\nsummary_stats\n\n# A tibble: 3 × 6\n  DOSE  Mean_Y Median_Y Min_Y Max_Y  SD_Y\n  &lt;fct&gt;  &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 25     1783.    1666.  826. 3866.  601.\n2 37.5   2464.    2388. 1801. 3463.  488.\n3 50     3239.    3194. 1949. 5607.  787.\n\n# Creating a table of the dataframe with kable package\nsummary_stats %&gt;%\n  kable() %&gt;%\n  kable_styling(full_width = FALSE) %&gt;%\n  add_header_above(c(\" \" = 1, \"Y Summary Statistics\" = 5))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nY Summary Statistics\n\n\n\nDOSE\nMean_Y\nMedian_Y\nMin_Y\nMax_Y\nSD_Y\n\n\n\n\n25\n1782.669\n1666.100\n826.43\n3865.79\n600.9420\n\n\n37.5\n2463.913\n2388.335\n1800.79\n3462.59\n488.4981\n\n\n50\n3238.866\n3193.980\n1948.80\n5606.58\n786.6904\n\n\n\n\n\n\nkable(summary_stats)\n\n\n\n\nDOSE\nMean_Y\nMedian_Y\nMin_Y\nMax_Y\nSD_Y\n\n\n\n\n25\n1782.669\n1666.100\n826.43\n3865.79\n600.9420\n\n\n37.5\n2463.913\n2388.335\n1800.79\n3462.59\n488.4981\n\n\n50\n3238.866\n3193.980\n1948.80\n5606.58\n786.6904\n\n\n\n\n\n\n# Plotting Y to show Frequency Distribution\nggplot(combined_data, aes(x = Y)) +\n  geom_histogram(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Y\", y = \"Frequency\") +\n  theme_minimal()\n\n\n\n\n\n\n\n# Plotting Age to show Frequency Distribution\nggplot(combined_data, aes(x=AGE))+\n  geom_histogram(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Age\", y = \"Frequency\") +\n  theme_minimal()\n\n\n\n\n\n\n\n# Plotting Weight to show Frequency Distribution\nggplot(combined_data, aes(x=WT))+\n  geom_histogram(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Weight\", y = \"Frequency\") +\n  theme_minimal()\n\n\n\n\n\n\n\n# Plotting Height to show Frequency Distribution\nggplot(combined_data, aes(x=HT))+\n  geom_histogram(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Height\", y = \"Frequency\") +\n  theme_minimal()\n\n\n\n\n\n\n\n# Determining the distribution of the Dose factorand plotting it as a bar graph\ntable(combined_data$DOSE)\n\n\n  25 37.5   50 \n  59   12   49 \n\nggplot(combined_data, aes(x=DOSE, fill=DOSE))+\n  labs(x = \"Dose\", y = \"Frequency\")+\n  geom_bar()\n\n\n\n\n\n\n\n# Determining the distribution of the Sex factor and plotting it as a bar graph\ntable(combined_data$SEX)\n\n\n  1   2 \n104  16 \n\nggplot(combined_data, aes(x=SEX, fill=SEX))+ \n  labs(x = \"Sex\", y = \"Frequency\")+\n  geom_bar()\n\n\n\n\n\n\n\n#Determining the distribution of the RACE variable and plotting it as a bar graph\ntable(combined_data$RACE)\n\n\n 1  2  7 88 \n74 36  2  8 \n\nggplot(combined_data, aes(x=RACE, fill=RACE))+ \n  labs(x = \"Race\",  y = \"Frequency\")+\n  geom_bar()\n\n\n\n\n\n\n\n\nScatterplots and boxplots were created to visualize relationships between variables and explore distributions.\n\n# Scatterplot of Y vs other numerical predictors\nggplot(combined_data, aes(x = AGE, y = Y)) +\n  geom_point()+\n  geom_smooth(method = \"lm\")+\n  labs(X = \"Age\", y = \"Sum of DV\")\n\n\n\n\n\n\n\n# Y Vs Weight\nggplot(combined_data, aes(x = WT, y = Y, color=DOSE)) +\n  geom_point()+\n  geom_smooth(method = \"lm\")+\n  labs(X = \"Weight\", y = \"Sum of DV\")\n\n\n\n\n\n\n\n# Y Vs Height\nggplot(combined_data, aes(x = HT, y = Y, color = DOSE)) +\n  geom_point()+\n  geom_smooth(method = \"lm\")+\n  labs(X = \"Height\", y = \"Sum of DV\")\n\n\n\n\n\n\n\n# Boxplot of Y by SEX\nggplot(combined_data, aes(x = SEX, y = Y)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n# Boxplot of Y by RACE\nggplot(combined_data, aes(x = RACE, y = Y)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n# Boxplot of Y by DOSE\nggplot(combined_data, aes(x = DOSE, y = Y)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n# Pair/Correlation plots of the numerical variables\n# Pair plot of selected variables\npairplot &lt;- pairs(combined_data[, c(\"Y\", \"AGE\", \"WT\", \"HT\")])\n\n\n\n\n\n\n\n# Correlation matrix\ncorrelation_matrix &lt;- cor(combined_data[, c(\"Y\", \"AGE\", \"WT\", \"HT\")])"
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#model-fitting",
    "href": "fitting-exercise/fitting-exercise.html#model-fitting",
    "title": "Fitting Exercise",
    "section": "",
    "text": "I built linear regression models using tidymodels with DOSE as the main predictor and with all predictors. I also fit logistic regression models to predict SEX using DOSE as the main predictor and using all predictors.\nRMSD and R-squared Calculation: I manually calculated RMSD and R-squared values for the linear regression models using tidymodels. I evaluated the performance of the logistic regression models by computing accuracy and ROC-AUC.\n\n# Creating a Linear Regression model specification\nlm_spec &lt;- linear_reg() %&gt;%\n  set_engine(\"lm\") %&gt;%\n  set_mode(\"regression\")\n\n# Fitting a linear model to the continuous outcome (Y) and DOSE\nlm_fit &lt;- lm_spec %&gt;%\n  fit(Y ~ DOSE, combined_data)\n\n# Sharing the result and summary of the fit\nsummary(lm_fit$fit)\n\n\nCall:\nstats::lm(formula = Y ~ DOSE, data = data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1290.1  -445.6   -90.9   352.2  2367.7 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  1782.67      87.85  20.292  &lt; 2e-16 ***\nDOSE37.5      681.24     213.69   3.188  0.00184 ** \nDOSE50       1456.20     130.43  11.165  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 674.8 on 117 degrees of freedom\nMultiple R-squared:  0.5159,    Adjusted R-squared:  0.5076 \nF-statistic: 62.33 on 2 and 117 DF,  p-value: &lt; 2.2e-16\n\n# Fit linear model using all predictors\nfull_linear_model &lt;- lm_spec %&gt;%\n  fit(Y ~ ., combined_data)\n\n# Print summary of the linear model\nsummary(full_linear_model$fit)\n\n\nCall:\nstats::lm(formula = Y ~ ., data = data)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1496.97  -362.81   -71.26   285.84  2421.48 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 4890.923   1822.710   2.683 0.008415 ** \nDOSE37.5     663.683    200.448   3.311 0.001258 ** \nDOSE50      1499.048    122.462  12.241  &lt; 2e-16 ***\nAGE            3.521      7.895   0.446 0.656517    \nSEX2        -360.048    217.775  -1.653 0.101121    \nRACE2        148.883    129.821   1.147 0.253936    \nRACE7       -420.950    451.163  -0.933 0.352846    \nRACE88       -65.300    246.961  -0.264 0.791954    \nWT           -23.281      6.440  -3.615 0.000454 ***\nHT          -741.050   1108.100  -0.669 0.505051    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 616.6 on 110 degrees of freedom\nMultiple R-squared:   0.62, Adjusted R-squared:  0.5889 \nF-statistic: 19.94 on 9 and 110 DF,  p-value: &lt; 2.2e-16\n\n# For the model with DOSE as the predictor\ndose_predictions &lt;- predict(lm_fit$fit)\ndose_rmsd &lt;- sqrt(mean((combined_data$Y - dose_predictions)^2))\n\n# For the model with all predictors\nfull_predictions &lt;- predict(full_linear_model$fit)\nfull_rmsd &lt;- sqrt(mean((combined_data$Y - full_predictions)^2))\n\n# For the model with DOSE as the predictor\ndose_r_squared &lt;- summary(lm_fit$fit)$r.squared\n\n# For the model with all predictors\nfull_r_squared &lt;- summary(full_linear_model$fit)$r.squared\n\n#Printing R squared value and RMSD\nprint(dose_rmsd)\n\n[1] 666.3137\n\nprint(full_r_squared)\n\n[1] 0.6200016\n\nprint(dose_r_squared)\n\n[1] 0.5158598\n\nprint(full_rmsd)\n\n[1] 590.3153\n\n# Fit a logistic model using the main predictor (DOSE)\nlogistic_dose &lt;- glm(SEX ~ DOSE, data = combined_data, family = binomial)\nsummary(logistic_dose)\n\n\nCall:\nglm(formula = SEX ~ DOSE, family = binomial, data = combined_data)\n\nCoefficients:\n            Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept)  -1.5892     0.3470  -4.580 4.65e-06 ***\nDOSE37.5     -0.0202     0.8488  -0.024    0.981    \nDOSE50       -0.8311     0.6266  -1.326    0.185    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 94.242  on 119  degrees of freedom\nResidual deviance: 92.221  on 117  degrees of freedom\nAIC: 98.221\n\nNumber of Fisher Scoring iterations: 5\n\n# Fit a logistic model using all predictors\nlogit_all &lt;- glm(SEX ~ ., data = combined_data, family = binomial)\nsummary(logit_all)\n\n\nCall:\nglm(formula = SEX ~ ., family = binomial, data = combined_data)\n\nCoefficients:\n              Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept)  5.914e+01  1.760e+01   3.360 0.000779 ***\nY           -1.113e-03  9.585e-04  -1.162 0.245397    \nDOSE37.5    -2.511e+00  2.041e+00  -1.230 0.218609    \nDOSE50      -6.176e-01  1.909e+00  -0.324 0.746303    \nAGE          1.128e-01  6.876e-02   1.640 0.100904    \nRACE2       -2.271e+00  1.480e+00  -1.535 0.124841    \nRACE7       -4.429e-01  4.335e+00  -0.102 0.918640    \nRACE88      -2.020e+00  2.428e+00  -0.832 0.405545    \nWT          -9.234e-02  7.992e-02  -1.155 0.247924    \nHT          -3.199e+01  1.040e+01  -3.076 0.002097 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 94.242  on 119  degrees of freedom\nResidual deviance: 30.518  on 110  degrees of freedom\nAIC: 50.518\n\nNumber of Fisher Scoring iterations: 8\n\n# Predictions for the model using the main predictor (DOSE)\ny_pred_main &lt;- ifelse(predict(logistic_dose, newdata = combined_data, type = \"response\") &gt; 0.5, 1, 0)\n\n# Predictions for the model using all predictors\ny_pred_all &lt;- ifelse(predict(logit_all, newdata = combined_data, type = \"response\") &gt; 0.5, 1, 0)\n\n# True labels from the test data\ny_true &lt;- combined_data$SEX\n\n# Compute accuracy\naccuracy_main &lt;- mean(y_pred_main == y_true)\naccuracy_all &lt;- mean(y_pred_all == y_true)\nprint(accuracy_main)\n\n[1] 0\n\nprint(accuracy_all)\n\n[1] 0.01666667\n\n# Compute ROC-AUC\nroc_auc_main &lt;- roc(y_true, predict(logistic_dose, newdata = combined_data, type = \"response\"))$auc\nroc_auc_all &lt;- roc(y_true, predict(logit_all, newdata = combined_data, type = \"response\"))$auc\nprint(roc_auc_main)\n\nArea under the curve: 0.5919\n\nprint( roc_auc_all)\n\nArea under the curve: 0.9832"
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#data-preparation",
    "href": "fitting-exercise/fitting-exercise.html#data-preparation",
    "title": "Fitting Exercise",
    "section": "Data Preparation",
    "text": "Data Preparation\nI previously calculated the RMSE by hand, but I wanted to attempt to calculate it through the metrics() function from the tidymodels. The following data preparation is written with this as a reference:\nData Splitting Reference\nThe data provided from the exercise above is splitted with 75% of it dedicated to the training data and the remaining 25% as testing data.\n\n# Set Seed for reproducibility\nset.seed(rngseed)\n\n# Select only the specified variables from the combined data (we're excluding race)\ncombined_subset &lt;- combined_data %&gt;%\n  select(Y, DOSE, AGE, SEX, WT, HT) \n\n# View the structure of the updated dataframe\nstr(combined_data)\n\ntibble [120 × 7] (S3: tbl_df/tbl/data.frame)\n $ Y   : num [1:120] 2691 2639 2150 1789 3126 ...\n $ DOSE: Factor w/ 3 levels \"25\",\"37.5\",\"50\": 1 1 1 1 1 1 1 1 1 1 ...\n $ AGE : int [1:120] 42 24 31 46 41 27 23 20 23 28 ...\n $ SEX : Factor w/ 2 levels \"1\",\"2\": 1 1 1 2 2 1 1 1 1 1 ...\n $ RACE: Factor w/ 4 levels \"1\",\"2\",\"7\",\"88\": 2 2 1 1 2 2 1 4 2 1 ...\n $ WT  : num [1:120] 94.3 80.4 71.8 77.4 64.3 ...\n $ HT  : num [1:120] 1.77 1.76 1.81 1.65 1.56 ...\n\n# Create training data by alloting 3/4 of the data for training\ndata_split &lt;- initial_split(combined_data, prop = 3/4)\n\n# Create data frames for the two sets:\ntrain_data &lt;- training(data_split)\ntest_data  &lt;- testing(data_split)"
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#model-fitting-1",
    "href": "fitting-exercise/fitting-exercise.html#model-fitting-1",
    "title": "Fitting Exercise",
    "section": "Model Fitting",
    "text": "Model Fitting\nThe data sets below is fitted to a linear regression model. The linear regression mode specification is initially declared and applied to the data. The first model(lm1) uses DOSE as a predictor and Y as the continuous outcome of interest. The second model (lm2) fits Y, the continuous outcome of interest to all predictors. Both models are fitted to the training data.\nI then fitted a null model to the training data as well, for future comparison and analysis.\n\n# Set Seed for reproducibility\nset.seed(rngseed)\n\n# Creating a Linear Regression model specification\nlm_spec &lt;- linear_reg() %&gt;% \n  set_engine(\"lm\")  %&gt;%\n  set_mode(\"regression\")\n  \n  \n# Fitting a linear model to the continuous outcome (Y) and DOSE\nlm1 &lt;- lm_spec %&gt;%\n  fit(Y ~ DOSE, train_data)\ntidy(lm1$fit)# Viewing the model\n\n# A tibble: 3 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)    1873.      109.     17.2  1.07e-29\n2 DOSE37.5        651.      275.      2.36 2.03e- 2\n3 DOSE50         1336.      158.      8.45 5.97e-13\n\n# Fit a model to Y with all predictors\nlm2 &lt;- lm_spec %&gt;%\n  fit(Y~., data=train_data)\ntidy(lm2$fit)# Viewing the model\n\n# A tibble: 10 × 5\n   term        estimate std.error statistic  p.value\n   &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 (Intercept)  5486.     2238.       2.45  1.64e- 2\n 2 DOSE37.5      677.      264.       2.57  1.21e- 2\n 3 DOSE50       1429.      152.       9.39  1.53e-14\n 4 AGE             1.34     10.0      0.134 8.94e- 1\n 5 SEX2         -529.      290.      -1.82  7.19e- 2\n 6 RACE2         173.      160.       1.08  2.82e- 1\n 7 RACE7        -360.      488.      -0.739 4.62e- 1\n 8 RACE88        -96.2     285.      -0.338 7.36e- 1\n 9 WT            -24.7       7.92    -3.12  2.52e- 3\n10 HT           -936.     1386.      -0.675 5.02e- 1\n\n# Creating a null model specification with parsnip\nnull_mod &lt;- null_model() %&gt;%\n  set_engine(\"parsnip\") %&gt;% \n  set_mode(\"regression\") %&gt;%\n  translate()\n\n# Fit the null model to the data\nnull_fit &lt;- null_mod %&gt;%\n  fit(Y ~ ., data = train_data)"
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#model-performance",
    "href": "fitting-exercise/fitting-exercise.html#model-performance",
    "title": "Fitting Exercise",
    "section": "Model Performance",
    "text": "Model Performance\nTo determine the performance of the models above, I calculate the RMSE and R-squared value for each models.\nI performed the predictions on each of the models. The predicted data is added to the original observed values for ease of comparison. From that, metrics() is used to calculate the performance metrics of the model predictions.\nFrom that, we were able to receive the RMSE and R-squared values.\nI used the following resource as references for the code below:\nParsnip Reference\nMetric Reference\n\n# Set Seed for reproducibility\nset.seed(rngseed)\n\n# Perform prediction on lm1\nlm1_predict &lt;- predict(lm1, train_data) %&gt;%\n  bind_cols(train_data) # Combining predicted value with observed value\n\n# Perform prediction on lm2\nlm2_predict &lt;- predict(lm2, train_data)%&gt;%\n  bind_cols(train_data) # Combining predicted value with observed value\n\n# Predict using the null model\nnull_predictions &lt;- predict(null_fit, new_data = train_data)%&gt;%\n  bind_cols(train_data) # Combining predicted value with observed value\n\n# Calculate performance metrics of the models\nmetrics(lm1_predict, truth = Y, estimate = .pred)\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard     703.   \n2 rsq     standard       0.451\n3 mae     standard     546.   \n\nmetrics(lm2_predict, truth = Y, estimate = .pred)\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard     619.   \n2 rsq     standard       0.575\n3 mae     standard     469.   \n\nmetrics(null_predictions, truth = Y, estimate = .pred)\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard        948.\n2 rsq     standard         NA \n3 mae     standard        765.\n\n\nFrom the metrics() function, we were able to see that the RMSE values were 703, 619, and 948 for model 1, model 2, and the null model respectively. All of these values were within expectation."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#model-performance-2",
    "href": "fitting-exercise/fitting-exercise.html#model-performance-2",
    "title": "Fitting Exercise",
    "section": "Model Performance 2",
    "text": "Model Performance 2\nTo further assess the models, I re-sampled the data with a 10-fold cross-validation test. After resampling, I fitted the model to the newly resampled data set. This was done for DOSE and everything as a predictor respectively. Similar to what was performed above, the metrics were calculated with collect_metrics() function.\nThe following link was what I used as a referenced for the following code(s):\nResampling Reference\n\n# For reproducibility \nset.seed(rngseed)\n\n# Set up resampling object with cross-validation folds of 10 folds\nfolds &lt;- vfold_cv(train_data, v = 10)\nfolds # Verifying that it was created\n\n#  10-fold cross-validation \n# A tibble: 10 × 2\n   splits         id    \n   &lt;list&gt;         &lt;chr&gt; \n 1 &lt;split [81/9]&gt; Fold01\n 2 &lt;split [81/9]&gt; Fold02\n 3 &lt;split [81/9]&gt; Fold03\n 4 &lt;split [81/9]&gt; Fold04\n 5 &lt;split [81/9]&gt; Fold05\n 6 &lt;split [81/9]&gt; Fold06\n 7 &lt;split [81/9]&gt; Fold07\n 8 &lt;split [81/9]&gt; Fold08\n 9 &lt;split [81/9]&gt; Fold09\n10 &lt;split [81/9]&gt; Fold10\n\n# Creating new model specification. \nlm_spec2 &lt;- \n  workflow() %&gt;% # The workflow() function initializes an empty workflow object.\n  add_model(lm_spec)  # The add_model() function adds a specified model spec to the workflow\n  # I'm using the linear regression spec that I added previously \n\n# Re-fitting the model with the resamples with DOSE as a predictor\nresampled_dose &lt;- \n  lm_spec2 %&gt;%\n  add_formula(Y ~ DOSE) %&gt;%\n  fit_resamples(folds)\nresampled_dose # Viewing the results\n\n# Resampling results\n# 10-fold cross-validation \n# A tibble: 10 × 4\n   splits         id     .metrics         .notes          \n   &lt;list&gt;         &lt;chr&gt;  &lt;list&gt;           &lt;list&gt;          \n 1 &lt;split [81/9]&gt; Fold01 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 2 &lt;split [81/9]&gt; Fold02 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 3 &lt;split [81/9]&gt; Fold03 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 4 &lt;split [81/9]&gt; Fold04 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 5 &lt;split [81/9]&gt; Fold05 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 6 &lt;split [81/9]&gt; Fold06 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 7 &lt;split [81/9]&gt; Fold07 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 8 &lt;split [81/9]&gt; Fold08 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 9 &lt;split [81/9]&gt; Fold09 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n10 &lt;split [81/9]&gt; Fold10 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n\n# Re-fitting the model with the resamples with everything as a predictor\nresampled_all &lt;- \n  lm_spec2 %&gt;%\n  add_formula(Y ~ .) %&gt;%\n  fit_resamples(folds)\nresampled_all # Viewing the results\n\n# Resampling results\n# 10-fold cross-validation \n# A tibble: 10 × 4\n   splits         id     .metrics         .notes          \n   &lt;list&gt;         &lt;chr&gt;  &lt;list&gt;           &lt;list&gt;          \n 1 &lt;split [81/9]&gt; Fold01 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 2 &lt;split [81/9]&gt; Fold02 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 3 &lt;split [81/9]&gt; Fold03 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 4 &lt;split [81/9]&gt; Fold04 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 5 &lt;split [81/9]&gt; Fold05 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 6 &lt;split [81/9]&gt; Fold06 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 7 &lt;split [81/9]&gt; Fold07 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 8 &lt;split [81/9]&gt; Fold08 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 9 &lt;split [81/9]&gt; Fold09 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n10 &lt;split [81/9]&gt; Fold10 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n\n# Calculating performance metrics results from resampling\ncollect_metrics(resampled_dose)\n\n# A tibble: 2 × 6\n  .metric .estimator    mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;        &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   697.       10 68.1    Preprocessor1_Model1\n2 rsq     standard     0.500    10  0.0605 Preprocessor1_Model1\n\ncollect_metrics(resampled_all)\n\n# A tibble: 2 × 6\n  .metric .estimator    mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;        &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   658.       10 66.6    Preprocessor1_Model1\n2 rsq     standard     0.569    10  0.0795 Preprocessor1_Model1\n\n\nIn the initial resampling, the RMSE was 697 and 658 for model 1 (DOSE as predictor) and model 2 (everything as a predictor) respectively. These values are similar to the values produced in the original model assessment, with it being slightly lower for model 1 and slightly higher for model 2. The standard error was slightly higher for model 1 at 68.1 vs the 66.6 for model 2.\nThe assessment was then repeated with a new seed.\n\n# Setting seed with a different value \nset.seed(5678)\n\n# Set up resampling object with cross-validation folds of 10 folds\nfolds2 &lt;- vfold_cv(train_data, v = 10)\nfolds2 # Verifying that it was created\n\n#  10-fold cross-validation \n# A tibble: 10 × 2\n   splits         id    \n   &lt;list&gt;         &lt;chr&gt; \n 1 &lt;split [81/9]&gt; Fold01\n 2 &lt;split [81/9]&gt; Fold02\n 3 &lt;split [81/9]&gt; Fold03\n 4 &lt;split [81/9]&gt; Fold04\n 5 &lt;split [81/9]&gt; Fold05\n 6 &lt;split [81/9]&gt; Fold06\n 7 &lt;split [81/9]&gt; Fold07\n 8 &lt;split [81/9]&gt; Fold08\n 9 &lt;split [81/9]&gt; Fold09\n10 &lt;split [81/9]&gt; Fold10\n\n# Creating new model specification. \nlm_spec3 &lt;- \n  workflow() %&gt;% # The workflow() function initializes an empty workflow object.\n  add_model(lm_spec)  # The add_model() function adds a specified model spec to the workflow\n# I'm using the linear regression spec that I added previously \n\n# Re-fitting the model with the resamples with DOSE as a predictor\nresampled_dose2 &lt;- \n  lm_spec3 %&gt;%\n  add_formula(Y ~ DOSE) %&gt;%\n  fit_resamples(folds2)\nresampled_dose2 # Viewing the results\n\n# Resampling results\n# 10-fold cross-validation \n# A tibble: 10 × 4\n   splits         id     .metrics         .notes          \n   &lt;list&gt;         &lt;chr&gt;  &lt;list&gt;           &lt;list&gt;          \n 1 &lt;split [81/9]&gt; Fold01 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 2 &lt;split [81/9]&gt; Fold02 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 3 &lt;split [81/9]&gt; Fold03 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 4 &lt;split [81/9]&gt; Fold04 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 5 &lt;split [81/9]&gt; Fold05 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 6 &lt;split [81/9]&gt; Fold06 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 7 &lt;split [81/9]&gt; Fold07 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 8 &lt;split [81/9]&gt; Fold08 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 9 &lt;split [81/9]&gt; Fold09 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n10 &lt;split [81/9]&gt; Fold10 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n\n# Re-fitting the model with the resamples with everything as a predictor\nresampled_all2 &lt;- \n  lm_spec3 %&gt;%\n  add_formula(Y ~ .) %&gt;%\n  fit_resamples(folds2)\nresampled_all2 # Viewing the results\n\n# Resampling results\n# 10-fold cross-validation \n# A tibble: 10 × 4\n   splits         id     .metrics         .notes          \n   &lt;list&gt;         &lt;chr&gt;  &lt;list&gt;           &lt;list&gt;          \n 1 &lt;split [81/9]&gt; Fold01 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 2 &lt;split [81/9]&gt; Fold02 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 3 &lt;split [81/9]&gt; Fold03 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 4 &lt;split [81/9]&gt; Fold04 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 5 &lt;split [81/9]&gt; Fold05 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 6 &lt;split [81/9]&gt; Fold06 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 7 &lt;split [81/9]&gt; Fold07 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 8 &lt;split [81/9]&gt; Fold08 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n 9 &lt;split [81/9]&gt; Fold09 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n10 &lt;split [81/9]&gt; Fold10 &lt;tibble [2 × 4]&gt; &lt;tibble [0 × 3]&gt;\n\n# Calculating performance metrics results from resampling\ncollect_metrics(resampled_dose2)\n\n# A tibble: 2 × 6\n  .metric .estimator    mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;        &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   698.       10 62.1    Preprocessor1_Model1\n2 rsq     standard     0.494    10  0.0649 Preprocessor1_Model1\n\ncollect_metrics(resampled_all2)\n\n# A tibble: 2 × 6\n  .metric .estimator    mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;        &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   655.       10 58.8    Preprocessor1_Model1\n2 rsq     standard     0.596    10  0.0537 Preprocessor1_Model1\n\n\nIn the secondary resampling, the RMSE was 698 and 655 for model 1 (DOSE as predictor) and model 2 (everything as a predictor) respectively. These values are similar to the values produced in the original model assessment and the initial resampling.\nCompared to the initial resampling, the RMSE are practically the same The standard error was slightly higher for model 1 at 62.1 vs the 58.8 for model 2, both of which were noticeably lower than the initial resampling assessment.\nIn all cases, the model with DOSE as a predictor have a higher RMSE value."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#model-predictions",
    "href": "fitting-exercise/fitting-exercise.html#model-predictions",
    "title": "Fitting Exercise",
    "section": "Model Predictions",
    "text": "Model Predictions\nFirst I created the dataframe lmpreds that will be used to plot the observed vs predicted values from the three models lm1, lm2 and null_fit.\n\n#Create the variable `model` for the predicted vs observed dataframes, and assign values as model1, model1 or nullmodel.\nlm1_predict$model &lt;- rep(\"model1\", 90)\nlm2_predict$model &lt;- rep(\"model2\", 90)\nnull_predictions$model &lt;- rep(\"nullmodel\", 90)\n\n#Bind all the dfs that contain predicted vs observed values from the 3 models\nlmpreds &lt;- bind_rows(lm1_predict, lm2_predict, null_predictions)\n\nNow, I created a graph that plots the predicted values against the observed values, and categorizing by model.\n\n#Creating the graph using ggplot\nggplot(lmpreds, aes(x= Y, y= .pred, color= model, shape= model))+ #Select the X and Y variables and color and shape by `model`\n  geom_point(size= 4)+ #Choose size of the points\n  scale_shape_manual(values = c(0, 1, 2))+ #Manually set the shape for each `model` category\n  scale_color_manual(values = c(\"red\", \"olivedrab4\", \"steelblue2\"))+ #Manually set the color for each `model` category\n  geom_abline(intercept = 0, slope = 1, linetype = \"dashed\", color = \"black\")+ #Set the 45 degree abline\n  xlim(0, 5000)+ #Set the x limits\n  ylim(0, 5000)+ #Set the y limits\n  labs(x= \"Observed values\", y= \"Predicted values\")+ #Manually set the x and y labels\n  theme_classic()\n\n\n\n\n\n\n\n\nBased on the previous plot that compares predicted vs observed values, it seems like model2 (with all the predictors) looks the best.\nNow, make a plot of predicted values against the residuals for Model 2 only. But first, the residuals have to be estimated in the lm2_predict dataframe.\n\n#Creat a new variable 'residuals' which is calculated as the difference of predicted and observed values\nlm2_predict &lt;- lm2_predict %&gt;% mutate(residuals = .pred - Y)\n\nAnd then plotting the predicted values against residuals\n\n#Creating the graph using ggplot\nggplot(lm2_predict, aes(x= .pred, y= residuals))+\n  geom_point(size= 4, color= \"olivedrab4\")+\n  geom_abline(intercept = 0, slope = 0, linetype = \"dashed\", color = \"black\")+ #Intercept line\n  ylim(-2500, 2500)+ #Make Y axis consistent\n  theme_classic()\n\n\n\n\n\n\n\n\nOverall the pattern of residuals seems consistent, except that there are more negative values that also have higher values."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#model-predictions-and-uncertainty",
    "href": "fitting-exercise/fitting-exercise.html#model-predictions-and-uncertainty",
    "title": "Fitting Exercise",
    "section": "Model Predictions and Uncertainty",
    "text": "Model Predictions and Uncertainty\nHere, focusing on the bootstrap method to sample the data from model 2 and then get the uncertainty. First, setting the same seed used at the beginning and then use the bootstraps function to create 100 bootstraps on the train data.\n\n# Set Seed for reproducibility\nset.seed(rngseed)\n\n#Create 100 bootstraps on the 'train_data'\nmodel2_boot &lt;- bootstraps(train_data, times = 100)\n\nNow, creating a loop to fit the model to each of the bootstrap samples and make predictions from the model for the train data.\n\n#Create an empty vector to store predictions list\nbootpreds_list &lt;- list()\n\n#Loop through each bootstrap sample\nfor (i in 1:length(model2_boot)) {\n  # Extract the current bootstrap sample\n  bootstrap_sample &lt;- analysis(model2_boot$splits[[i]])\n  \n  #Fit a linear model\n  lm_model &lt;- lm(Y ~ ., data = bootstrap_sample)\n  \n  #Make predictions on the original train_data\n  bootpreds &lt;- predict(lm_model, newdata = train_data)\n  \n  #Store predictions in the dataframe\n  bootpreds_list[[i]] &lt;- bootpreds\n}\n\n#Print predictions for the first model\nprint(bootpreds_list)\n\n[[1]]\n       1        2        3        4        5        6        7        8 \n3084.735 1998.729 2527.558 2283.053 2806.086 1415.609 2476.717 2099.378 \n       9       10       11       12       13       14       15       16 \n1681.042 2534.831 1575.519 1811.317 2246.109 3063.664 2188.941 2292.070 \n      17       18       19       20       21       22       23       24 \n3227.270 2640.686 2323.243 3167.282 3674.273 3031.556 1333.353 2505.346 \n      25       26       27       28       29       30       31       32 \n2879.507 2783.598 2305.497 1398.094 1476.571 1837.161 2569.122 3436.165 \n      33       34       35       36       37       38       39       40 \n2075.903 1438.036 2099.509 1774.102 2891.023 3382.374 2343.007 1712.864 \n      41       42       43       44       45       46       47       48 \n2077.648 2059.700 1808.602 3957.718 3078.213 3272.091 2216.724 2134.993 \n      49       50       51       52       53       54       55       56 \n3364.379 3257.621 2339.225 2713.541 1948.681 3446.513 2167.568 1840.163 \n      57       58       59       60       61       62       63       64 \n2883.719 2028.832 3025.070 2128.212 3090.626 1961.302 1306.096 3207.548 \n      65       66       67       68       69       70       71       72 \n1591.039 3007.527 3104.385 1347.219 2355.533 2095.333 2784.010 2669.076 \n      73       74       75       76       77       78       79       80 \n2170.289 2323.098 1732.052 1718.211 2997.105 2789.700 1382.215 2747.932 \n      81       82       83       84       85       86       87       88 \n2225.858 2909.426 1656.299 3424.824 2762.856 1793.212 1731.601 3013.997 \n      89       90 \n3268.912 3115.217 \n\n[[2]]\n       1        2        3        4        5        6        7        8 \n3376.975 1872.912 2244.979 1906.853 3043.755 1116.333 2292.748 1837.015 \n       9       10       11       12       13       14       15       16 \n1428.758 2104.267 1379.241 1698.682 2407.744 3325.636 1876.915 2137.882 \n      17       18       19       20       21       22       23       24 \n3563.634 3044.656 1979.685 3338.926 3978.943 3332.196 1020.812 2391.011 \n      25       26       27       28       29       30       31       32 \n3169.415 3166.660 2475.079 1278.410 1490.930 1891.224 2863.524 3671.860 \n      33       34       35       36       37       38       39       40 \n1927.730 1210.536 1943.516 1581.224 3282.906 3822.072 2060.433 1670.229 \n      41       42       43       44       45       46       47       48 \n1819.443 1945.562 1716.001 4067.683 3283.692 3591.572 1920.605 1972.617 \n      49       50       51       52       53       54       55       56 \n3533.643 3595.244 2151.874 2916.625 1683.835 3623.282 2079.577 1551.467 \n      57       58       59       60       61       62       63       64 \n2957.227 1785.585 3384.408 1849.165 3252.174 1741.316 1119.567 3427.821 \n      65       66       67       68       69       70       71       72 \n1563.286 3339.309 3525.410 1300.674 2080.718 1901.031 2860.486 2386.199 \n      73       74       75       76       77       78       79       80 \n2018.961 1945.093 1515.571 1479.250 3178.678 3150.289 1183.371 2945.918 \n      81       82       83       84       85       86       87       88 \n2091.501 3202.676 1528.190 3777.354 2960.311 1559.572 1617.903 3290.382 \n      89       90 \n3628.922 3359.884 \n\n\nAnd now estimating the Median and 89% Confidence Intervals of the predictions. First, converting the list to a dataframe.\n\n#Convert the list to a dataframe 'bootpred_df'\nbootpred_df &lt;- data.frame(do.call(cbind, bootpreds_list))\n\n# Compute the median and 89% confidence intervals for each observation\nmedians &lt;- apply(bootpred_df, 1, median)\nconf_intervals &lt;- apply(bootpred_df, 1, function(x) quantile(x, c(0.055, 0.945)))\n\n# Combine median and confidence intervals into the 'results_df' dataframe\nresults_df &lt;- data.frame(Median = medians, Lower_Interval = conf_intervals[1,], Upper_Interval = conf_intervals[2,])\n\n#Combine the 'results_df' and 'bootpred_df' and the '.pred' column from the original df that fitted the model 'lm2_predict'\nbootpred_df &lt;- cbind(bootpred_df, results_df, lm2_predict$.pred, lm2_predict$Y) %&gt;% \n  rename(median = 'Median', lower = 'Lower_Interval', upper = 'Upper_Interval', predictions = 'lm2_predict$.pred', observed = 'lm2_predict$Y') #Rename some of the columns\n\nNow, creating a graph that plots the predicted values and the observed values of the original model fitting, adding the median and the 89% confidence intervals obtained from the bootstrap.\n\n#Create the plot\nggplot(bootpred_df, aes(x = observed, y = predictions))+\n  geom_point(aes(y = predictions), color = \"orangered2\", size= 2)+ #Plot the predicted values\n  geom_point(aes(y = median), color = \"steelblue2\", size= 2)+ #Plot the median\n  geom_errorbar(aes(ymin = lower, ymax = upper), color = \"black\", width = 0.2)+ #Draw the upper and lower CI limits\n  geom_abline(intercept = 0, slope = 1, linetype = \"dashed\", color = \"darkgrey\")+ #Draw the 45 degree line\n  xlim(0, 6000)+ #Set the x limits\n  ylim(0, 6000)+ #Set the y limits\n  labs(x= \"Observed values\", y= \"Predicted values\")+\n  theme_classic()\n\n\n\n\n\n\n\n\nThe previous graph plots predicted versus observed values and the 89% confidence intervals. What is observed is that some of the observations have higher uncertainty (black bars) than others but overall they look great. Based on the graph it seems like the model does a good job on predicting Y as a function of all the variables."
  }
]